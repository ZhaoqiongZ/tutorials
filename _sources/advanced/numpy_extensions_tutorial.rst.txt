
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.3893, 11.0895,  6.7683,  1.4070, 14.3041],
            [ 3.1912,  5.6903,  4.2241,  5.8997,  2.4311],
            [ 6.2406,  7.4086,  8.3964,  8.0239,  2.9594],
            [ 7.8571,  9.9362,  2.6113, 15.7943,  7.3254],
            [ 9.8476, 10.4579, 11.2394,  7.6967,  5.1627],
            [ 7.8571,  9.8611,  1.4135,  4.0941,  7.3254],
            [ 6.2406,  4.5959,  6.9988, 12.0317,  2.9594],
            [ 3.1912,  5.8830, 13.7523,  2.7097,  2.4311]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6932, -1.1741, -0.8014,  1.6882,  1.3355,  1.5327, -0.6424,  0.2541],
            [-0.8756,  0.3878, -1.5365, -0.7491, -0.1813, -0.8125, -0.3727,  1.0448],
            [ 0.5858, -0.1133,  0.9202,  1.6246,  1.5085,  0.6111, -0.0671,  0.4632],
            [ 1.0042, -0.0805,  0.0207, -0.3710, -1.3794,  2.1182, -1.8123,  1.0441],
            [ 0.0805,  0.8075, -1.8446,  0.4519,  2.0006, -1.1992, -0.4014,  0.3257],
            [-0.8542, -0.2563, -0.9706,  0.2663,  0.5988,  1.6782,  0.3248, -1.1244],
            [-0.6025,  0.4900, -0.0413, -0.6930, -0.0123,  0.7493,  0.1990,  0.2759],
            [ 0.1789,  0.0066, -0.2344, -0.4828, -1.8590,  1.6149,  1.9675, -0.5322]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0383,  1.6917,  0.5696],
            [-0.4075,  2.6704,  0.3533],
            [-1.2591, -2.1124, -0.5123]], requires_grad=True), Parameter containing:
    tensor([[0.2605]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.1711,  1.0894,  3.0949, -2.6268, -5.2438,  5.9354, -0.2683, -2.1854],
            [ 6.1640,  5.0883,  3.8960, 10.1868,  5.0979,  3.4611,  1.3932,  6.8902],
            [ 1.6697,  0.9591,  4.3960,  7.1403, -5.7870, -4.9258,  1.5442, -4.3507],
            [ 3.8601, -0.3663, -2.3140,  0.0958, -2.8289, -2.1673, -1.6882,  2.0091],
            [ 1.8098, -3.2351, -3.0344,  1.8235,  6.1948,  4.7052,  1.7912,  3.5765],
            [-0.2509, -3.5760,  3.4012,  2.9308, -4.2828,  6.1045,  4.3148,  5.5739],
            [ 4.8496,  2.3745,  3.9456,  4.2244,  2.2984,  3.3558, -0.6854, -2.7760],
            [-3.0201, -5.2072, -6.6115,  1.5885, -1.7826, -8.1000, -2.0869,  7.1597]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.2351e-02, -2.7353e+00, -1.3587e-01,  1.5531e+00,  2.0259e+00,
             -5.1733e-01, -2.4588e-01,  1.7147e-02,  6.2358e-01,  2.1403e-01],
            [ 6.8660e-01, -3.4164e+00,  3.8956e+00,  3.1414e+00,  6.6942e+00,
              2.7004e+00, -8.9522e-01, -2.4987e+00,  5.7036e+00,  1.9247e+00],
            [ 1.7988e+00,  3.7511e+00,  3.9345e+00, -3.6035e-01,  2.8154e+00,
              6.1963e+00, -2.7847e-01, -5.2972e+00,  8.4369e+00,  1.4113e+00],
            [-8.0244e-01, -4.6229e+00, -6.3145e+00, -9.0767e-01, -9.1748e+00,
             -5.9997e+00,  6.7098e+00, -2.8867e+00, -7.3330e+00, -2.3131e+00],
            [ 2.5005e-01, -6.6229e-01, -4.9738e+00, -5.3785e+00,  2.1605e+00,
             -1.6375e+00,  3.8441e+00, -2.2992e+00, -5.1801e+00, -4.4271e-01],
            [ 5.5972e-01,  2.3202e+00, -3.3513e+00,  2.9762e-01,  4.1587e+00,
              2.0582e+00,  4.0701e-01, -2.3900e-01,  7.0926e+00,  1.5182e+00],
            [-3.0021e-01, -1.5889e+00,  3.8183e+00, -3.2552e+00, -5.8112e+00,
             -6.5714e+00,  2.1169e+00, -1.7354e+00, -2.1897e+00, -6.9114e-01],
            [ 1.1762e+00,  4.0811e-01,  2.1665e+00, -7.2148e-01,  5.0474e+00,
              9.1518e-01,  2.7588e+00, -3.0351e+00, -2.7365e+00, -3.6854e-01],
            [ 6.0898e-01,  2.2836e+00,  4.4582e+00,  4.6546e+00, -2.4268e-01,
             -1.1669e+00, -2.3806e+00, -1.9443e+00,  9.2350e-01,  2.4260e-01],
            [-5.6482e-01, -2.0434e+00, -3.0953e+00, -2.1185e+00, -2.7452e-01,
              7.6778e-01,  2.6041e+00,  2.7643e+00,  6.0338e-01, -8.4352e-04]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.579 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
