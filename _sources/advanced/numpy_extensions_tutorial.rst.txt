
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[18.0889,  9.7565,  5.7322,  4.4296,  2.1815],
            [ 6.6182, 13.9726,  6.4948,  4.1905, 16.6351],
            [11.3140,  7.0694,  8.5913,  0.3567,  6.6584],
            [ 6.6102, 12.3125,  0.8528,  5.3608,  6.0791],
            [ 8.5886,  2.7841,  6.5056,  8.3579,  0.2130],
            [ 6.6102,  5.7982,  6.2474, 11.0535,  6.0791],
            [11.3140,  2.0611,  5.4295,  6.5733,  6.6584],
            [ 6.6182,  6.9014,  9.2275,  6.6198, 16.6351]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7480,  0.3824,  0.2902,  0.5308, -0.4976,  0.6299, -0.1686,  1.2360],
            [-0.7691,  1.7790,  0.1091, -0.6862, -0.9492,  1.1351,  0.3384, -0.1047],
            [ 0.5928, -0.6197,  0.7788,  1.2398, -0.2147,  1.1042,  1.1579, -0.3829],
            [-0.1259, -0.2120,  1.9641,  0.7775,  0.6499, -1.9788,  0.5066, -2.7894],
            [ 0.2446, -0.4236,  1.9676,  0.0349, -0.1328, -0.7107, -0.5747, -0.2691],
            [ 1.7878,  0.9577, -0.1674,  1.1049,  0.4022,  1.3447,  1.2859, -0.6583],
            [ 1.2432,  2.3733,  0.9984,  0.5231,  1.7029,  0.1028, -0.8681,  0.3194],
            [-0.1645,  0.8471, -0.8484, -0.6520, -1.0703, -0.3705, -0.0820,  1.3888]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4113, -1.1266,  1.2707],
            [-2.5417, -2.3887,  0.9718],
            [-1.4659,  0.0842,  0.9601]], requires_grad=True), Parameter containing:
    tensor([[0.5381]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2661,  0.2578, -0.6110,  1.0052, 10.3589, -1.4385, -1.4619, -0.6023],
            [ 4.6770,  0.7087, -3.9643, -2.8951, -2.2168, -3.3944,  1.2799,  6.7068],
            [-4.2554, -0.4468,  3.4445, -4.7926,  1.0603,  0.4505,  2.5693,  5.1893],
            [-1.1960,  4.6423,  6.5077, -4.5011,  4.8397,  4.1168,  6.9399,  2.8795],
            [ 3.1823,  3.5465, -2.8910, -7.5239,  0.8895,  8.3551,  9.3475,  3.9144],
            [ 6.1122, -1.3471, -5.0246, -6.5306, -6.5281,  3.3404,  3.7025, -1.0748],
            [ 0.7566, -3.9385,  3.5160,  0.5669, -2.6822, -0.3011,  5.1005,  9.5414],
            [ 2.3559, -0.1562,  2.8311,  1.7490, -1.2718,  4.2272,  3.7175,  4.9670]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0390,  0.2969,  1.3353, -1.0544, -0.2850,  1.3024, -1.1204,  0.1617,
              2.1260, -1.9254],
            [ 0.2224,  4.3776,  3.2667, -5.7761,  2.1370,  1.7569,  1.9447,  3.0192,
              5.6966, -4.0861],
            [ 2.1429,  7.6130,  1.5754, -7.6228, -4.4213, -0.4869,  5.5105,  6.0685,
              5.4060, -3.8279],
            [-2.3713, -1.8163,  1.9923, -2.9823, -2.6587,  2.2748,  4.4392,  1.9933,
              0.8455, -3.0883],
            [-4.8938, -0.0227,  4.4362, -1.0751, -1.2116, -0.8450, -1.0977,  4.1790,
              0.0502,  0.3231],
            [-2.9456, -4.0353, -4.0718, -2.6845, -3.4503, -4.3530, -1.5259,  3.0540,
             -4.2526,  0.5346],
            [-3.0131, -3.5306,  0.8741, -2.1833, -4.1281, -5.6502,  5.1218,  0.7527,
              0.1213, -0.5965],
            [ 1.7551,  6.4104,  2.3346, -3.7455, -2.1237,  1.7065,  8.4918, -1.8796,
              6.1058, -2.1477],
            [ 2.9042,  3.9884, -2.3715, -3.2260, -3.3002,  3.7706, -0.9814, -4.1023,
              3.9869, -2.0545],
            [ 0.5628,  0.9396, -1.4472, -1.0670, -0.4637,  2.2944, -2.5198,  0.1004,
              2.0099, -0.7647]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.578 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
