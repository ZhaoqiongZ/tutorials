
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.5640,  5.7807,  6.8656,  2.4301,  9.8156],
            [ 5.4705,  8.1350, 11.6295,  5.9913,  3.1180],
            [ 2.8779,  2.6003,  4.1789, 10.8317,  1.6236],
            [ 5.2911,  7.1900,  1.9780,  4.6403,  4.5343],
            [15.0233,  8.6666,  4.8533,  5.5498,  3.3802],
            [ 5.2911,  4.5363,  9.5698,  2.1064,  4.5343],
            [ 2.8779,  6.8013,  7.8875,  6.9301,  1.6236],
            [ 5.4705,  2.9638,  7.3478,  8.9271,  3.1180]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0312, -0.5002,  0.4793, -0.8093, -0.0465, -1.5509, -0.1791,  0.5838],
            [ 0.4735, -0.2389,  0.1913, -1.2758,  0.3572,  0.0422, -0.4600,  1.3582],
            [ 0.3538, -0.0469,  0.4438,  0.7559, -1.0136, -1.0303,  0.3384, -0.8354],
            [ 0.3953, -1.6034,  0.0438,  0.3428,  0.0686,  0.8241,  1.0685,  1.5424],
            [-0.3031, -0.4299, -0.5584, -0.8414,  0.0037, -0.1747, -0.6375,  0.0818],
            [-0.5084,  0.6176,  0.6011, -0.9909, -0.4548,  0.6233,  1.8743, -0.4714],
            [-0.9457,  0.1680, -0.6913, -0.4648, -1.2917, -1.5539,  1.1689, -1.7974],
            [-0.6020,  0.9932,  0.2155,  0.0583,  0.1480,  0.5072,  0.5618, -1.5728]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3152,  1.3465,  1.7399],
            [-1.3235,  0.6264, -1.4318],
            [-1.1303, -0.7321, -0.9205]], requires_grad=True), Parameter containing:
    tensor([[0.6008]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0294, -0.8225, -2.5549,  2.1577,  7.8424, -3.0306,  5.7509, -1.5769],
            [ 5.2665, -1.9001,  1.1845,  1.4721,  0.5919,  0.9132, -2.5491, -2.1819],
            [ 2.6612,  3.8223,  1.8751,  3.8849, -0.7713, -1.2309,  0.3572, -7.0522],
            [-1.3264,  4.7296, -0.6946,  7.7490,  0.6221,  3.6775,  1.0923,  0.5667],
            [-0.0792, -1.2609,  3.5082, -7.4082,  2.7722,  3.6641,  0.6557, -0.1561],
            [-0.8269,  0.6861, -3.5976, -1.4984,  5.1048, -3.1186, -0.5833,  3.7726],
            [-1.1675,  3.4768,  3.1498,  1.1244, -1.3075, -3.2262, -2.5089,  1.8006],
            [ 8.8849,  1.9091,  6.0734,  0.6142,  5.5815,  4.5135,  3.7234,  2.4439]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3886,  1.4498,  3.0093,  1.4671, -0.3545, -1.3730, -1.1925, -3.0334,
             -2.1316,  0.4638],
            [-1.1811, -1.7823, -4.9202, -2.8645,  1.8020,  7.9837,  3.3987, -2.9972,
              0.3732, -2.3452],
            [ 0.9415, -3.4920, -1.4772, -2.1838, -0.6484,  3.4040,  0.0434,  7.1108,
              4.9309,  1.9875],
            [ 3.0335,  2.3612,  8.2770, -1.1125, -5.0271, -2.3893, -5.2477,  1.4562,
             -5.0949,  0.4525],
            [-0.8487,  2.7994,  5.2344,  3.6901,  0.8507,  0.9415, -0.1159, -1.6197,
              0.3767,  1.4134],
            [-3.6680, -4.3274, -5.2497, -3.5442,  0.0502, -1.0457, 10.4584,  0.2624,
              2.1343, -1.9071],
            [-0.4070, -5.5852,  0.1934, -1.8448, -2.4744, -0.0953,  1.7482, -1.8450,
              2.6095,  1.1376],
            [ 1.9574, -0.8735,  4.1651, -4.3401, -0.0361, -4.4486, -0.9308,  2.5325,
              0.6649, -2.7121],
            [ 0.1330,  0.1244, -0.8197, -0.6819, -0.7359, -4.9919, -2.0731, -3.1399,
             -3.2266,  0.6046],
            [-0.5032,  0.5829,  0.0739,  0.4376, -0.3674, -2.5700, -2.6882, -1.4522,
             -0.1629,  0.9175]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.597 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
