
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.4571,  6.4437,  5.8676,  3.3913,  6.0929],
            [ 3.0795,  9.1203,  5.1653,  7.4129,  5.6021],
            [ 6.9677,  2.1227,  3.4909,  8.7345,  8.0739],
            [ 3.9719,  9.1943,  6.9694,  7.4231, 12.7589],
            [14.2158,  4.8208,  7.0324,  5.2981,  3.6547],
            [ 3.9719,  8.0408,  9.7670,  8.8539, 12.7589],
            [ 6.9677,  5.1139,  4.7328, 13.4161,  8.0739],
            [ 3.0795,  6.1809,  7.1842,  6.4465,  5.6021]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5020, -0.6628, -0.3296,  1.2553, -0.4186,  0.9674,  1.1584, -1.8588],
            [-0.2640,  0.7426,  0.6908,  0.4128,  0.4622, -1.0851, -0.1987, -0.6960],
            [-0.2199,  1.9609,  0.2701,  0.5008, -0.6395,  0.8991, -0.0521, -0.1312],
            [-0.0142, -1.7323,  0.3582,  0.6714, -0.0657, -0.8537, -0.0283, -0.5537],
            [ 0.0795,  0.0929,  1.1454, -0.9955, -0.2243,  0.2532, -0.0538, -0.1651],
            [-2.9067, -0.3472, -2.1563,  0.7321,  0.3477,  0.0138,  0.7306,  1.2318],
            [ 0.2642,  1.3534, -0.0109,  0.2613,  1.0136,  0.3199,  1.0743,  0.7270],
            [-0.3297,  0.6416,  0.2663, -0.7644, -0.4493,  1.7626, -1.8196, -0.6790]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0859,  0.4725, -2.0190],
            [-1.3817,  0.0561, -0.9315],
            [-0.7719,  0.6358,  1.0424]], requires_grad=True), Parameter containing:
    tensor([[-0.9445]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.9230, -1.5276, -2.5796, -2.7694, -2.0531, -5.1081,  4.5195, -0.1422],
            [-2.4764, -7.2440, -5.4385, -4.9397, -0.7577,  0.7334,  0.0434, -6.9399],
            [-5.0138, -4.9209, -0.5407,  0.7349,  4.6208, -0.9900, -3.9480, -4.5426],
            [-1.5927,  0.0305,  1.0012,  3.8828, -1.0002, -3.2490,  3.1622,  1.8542],
            [-1.1431,  0.5710, -5.2313,  0.0556, -2.4856,  2.1812, -0.8733,  4.4946],
            [-5.7555,  1.2439, -3.4401,  2.5068,  2.2596,  0.0846, -2.9010, -1.8012],
            [-1.4159,  0.4673, -3.1596,  6.0262, -6.1808,  4.7801, -1.2636,  2.3470],
            [-1.8830, -1.5903, -3.2069,  3.4632, -2.6391,  3.7157, -0.2094,  0.6670]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1210,  0.0808,  3.2176, -1.0475,  0.7802, -1.5319, -4.7212, -0.6436,
              0.2858, -1.9702],
            [ 0.5740,  2.2318,  2.1622, -1.2357,  3.2806, -5.0233, -0.8979, -0.4186,
             -4.8065,  2.3122],
            [ 0.1962,  0.5188,  2.7374, -2.7609,  0.8565,  4.1920, -0.6953, -0.5865,
              0.0964,  1.3430],
            [-0.7635, -0.5378,  4.0332, -4.1524,  2.1098,  3.2032, -5.3694,  4.6370,
              0.2038, -0.1769],
            [-0.2664, -2.2302,  5.3013, -0.3063,  1.1596, -1.8580, -1.1425,  0.6645,
              0.7899,  3.1597],
            [ 0.3027, -0.5172,  7.8128, -0.5986, -1.0430,  1.9690, -0.0197,  5.5498,
             -1.4042, -1.0211],
            [ 0.9779, -0.2440,  4.1575, -3.0650,  2.4069,  2.7814,  3.8458, -1.5061,
              2.8449, -3.6319],
            [-0.7143, -0.8811,  1.2947, -4.7655,  2.6089, -4.9169,  0.3499, -5.2478,
              2.9816, -0.8699],
            [-1.4610, -1.4828,  0.5328, -4.8537, -0.3363, -1.7749,  1.9711, -2.5511,
             -1.9681,  1.2156],
            [-0.9086, -0.1128,  2.3731, -0.3489,  0.4435,  0.9797,  0.0520,  0.8505,
              0.3771,  0.0584]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.478 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
