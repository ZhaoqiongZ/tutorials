
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.4943,  5.5465,  5.5619,  1.2713, 10.0292],
            [ 3.7472,  2.0330,  6.0125,  7.7112, 17.7816],
            [ 9.1034,  3.1192,  7.4915,  4.8085,  1.9257],
            [ 4.1400,  3.6642,  6.9020,  6.8669, 14.7184],
            [ 3.2373,  6.9077,  6.9333,  3.5935,  9.8822],
            [ 4.1400,  4.0986,  2.3552, 16.0395, 14.7184],
            [ 9.1034,  9.7567,  5.0689,  3.4542,  1.9257],
            [ 3.7472,  7.5103,  9.1190,  4.2223, 17.7816]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4332, -0.6541, -1.0756,  0.8595, -0.8706,  0.1833, -0.7457,  1.2122],
            [ 1.1801, -0.2655, -0.1093, -0.8568,  0.4613, -1.8944,  0.4352, -1.4168],
            [-0.5777, -0.5805,  0.5210,  0.1634,  0.8580,  0.8986, -0.3575, -0.2725],
            [ 1.5232, -1.2216,  0.3231, -1.2081, -0.6675,  0.7702,  1.5424, -2.1178],
            [-0.5236, -1.9183, -0.2805, -2.1051,  0.7949, -1.1603,  0.6001, -0.2608],
            [ 0.9868, -0.5205, -0.0446,  0.1882, -0.5902, -0.8026, -0.5152,  1.4709],
            [ 0.0385, -0.3803,  0.5834,  0.9827, -1.3620, -0.3427,  0.9346,  0.4052],
            [-1.2948,  0.6880, -0.4972, -0.2116,  1.2658, -0.1469, -0.3354,  1.2532]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3759, -1.3478,  0.1865],
            [ 0.3023,  0.1655, -0.2700],
            [-1.8589, -0.0806,  0.6282]], requires_grad=True), Parameter containing:
    tensor([[1.1422]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.7304, -3.2968, -1.6420,  1.5599,  0.8700, -2.0008,  2.5181,  0.4236],
            [ 0.3084, -0.4966, -2.3239, -2.2867, -0.8370,  2.7576,  3.0266,  4.4175],
            [ 0.6382, -4.1485, -3.9417,  0.6364,  2.4098,  2.8358,  1.1285, -3.6209],
            [ 3.7652,  3.8323,  0.0137,  1.9911,  2.2517,  3.3743,  3.9586, -1.6700],
            [ 0.6993, -1.0958, -1.0162,  4.2492,  4.9189,  2.7916, -2.0065,  1.6274],
            [ 2.7966, -0.5484, -0.6547,  2.6099,  2.9455,  1.8003, -0.0955, -1.6384],
            [ 5.6654,  3.3281,  3.5065,  1.4511, -0.1515,  2.2799,  1.1111, -0.4701],
            [-0.9371, -0.1040, -0.8851,  4.8918,  3.2848,  3.9393, -1.0385, -1.1312]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2020, -1.1806, -1.7517, -1.0244, -1.1553,  1.8045, -0.6490, -1.0898,
             -0.7333,  0.1182],
            [ 0.1839,  0.2279, -0.9274, -0.2072, -1.3467, -0.0176,  0.4201, -0.4094,
             -0.5539, -0.0946],
            [-1.4098, -4.1452, -3.2488, -3.0526,  0.9244, -1.7223, -1.5896, -2.2958,
             -0.9276,  0.4784],
            [ 0.5033, -0.3329,  0.5241, -2.1323, -2.3585,  0.6769,  0.5520, -1.4021,
             -2.0971,  0.3005],
            [-1.7395, -2.5062, -1.0463,  1.2773, -2.3990, -0.9235, -1.3846, -2.5994,
              2.5785, -0.0542],
            [ 1.2180,  4.0471, -1.9979, -3.9895, -0.9034,  6.0714,  3.6264, -3.8701,
              0.4624,  1.2541],
            [ 0.5231,  0.1339,  1.4856,  0.5909, -1.9983, -1.1451, -1.6360,  1.6804,
              1.2261, -0.5805],
            [ 5.4275, -0.0980, -0.7044,  1.3207,  4.9921,  4.9376, -0.5136,  2.6877,
             -1.8189, -0.3530],
            [-0.1863, -1.2353,  1.2001, -0.5598, -0.9822,  2.4078, -1.3027, -0.6482,
              1.0550, -0.3082],
            [ 1.4841,  0.9896,  0.5889,  3.3618,  1.6900, -2.6115,  2.5502, -0.9890,
             -1.1694,  0.5494]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.527 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
