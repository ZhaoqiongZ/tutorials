
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.7541,  2.7684,  7.5846,  8.0391,  5.8456],
            [15.4982,  8.3640, 10.8407,  5.5078,  7.5605],
            [10.1417,  3.2629,  3.9998,  5.8182,  7.0808],
            [ 8.6353, 11.0751,  5.7987,  8.9576,  6.7868],
            [ 9.6775,  5.9595,  4.1236, 12.2291,  3.5326],
            [ 8.6353,  7.0457,  2.5421,  8.0954,  6.7868],
            [10.1417,  5.8379,  6.8410,  3.2515,  7.0808],
            [15.4982,  7.1289,  5.0906,  6.5571,  7.5605]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7041, -0.9989,  0.9416,  0.2319, -0.3097,  0.8901,  1.0794,  0.3607],
            [-1.6629,  0.3595, -0.4212,  0.9322, -0.0353, -0.6008,  0.8828, -0.7814],
            [-1.4115, -0.1245,  0.9877, -1.2895, -1.8220,  0.6114,  0.2125, -0.4178],
            [-0.5207,  1.1789, -0.7692, -0.4921, -1.1746, -1.8264, -0.0246, -0.2466],
            [-0.4218, -0.2444,  0.2452,  0.9590,  0.2059,  0.4637, -1.1369, -0.1234],
            [ 1.3812,  0.7964,  0.4127,  1.2307, -0.1639,  0.6896,  0.3921,  0.4228],
            [ 0.2281,  1.1161, -1.2069,  0.7099,  0.7785,  2.0005,  1.1892,  1.8075],
            [-0.2675, -1.7738, -0.3826,  1.2321, -0.5331, -0.4360,  1.0778, -1.3375]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4948, -0.4611, -1.2475],
            [-0.0447,  0.5690,  0.2346],
            [ 0.6098, -0.7753, -1.0249]], requires_grad=True), Parameter containing:
    tensor([[-0.3319]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.9282, -4.5401, -3.9637,  1.5331,  2.2195,  1.6100, -0.4997,  0.3531],
            [-1.6480, -2.7144,  0.8542, -1.9464, -7.6300, -1.3358,  2.1956, -1.6386],
            [ 4.1255,  1.9495, -6.1549,  2.2990,  5.3985, -1.6309, -3.6423, -1.9097],
            [-1.0697, -1.1764,  0.5182, -1.9492, -3.2136,  2.6069,  4.5743,  2.7259],
            [ 0.5313,  0.2449, -3.2849, -1.0745,  3.0691, -1.7004, -4.4086, -1.7269],
            [ 1.6044, -1.1549,  0.5100,  2.0699, -1.7719,  0.4267,  5.5106, -0.1675],
            [ 2.4928,  0.4975, -0.1675, -0.1066,  1.3927, -3.4318, -3.4410,  1.0310],
            [-4.2715, -1.9871,  3.3596,  3.2553,  0.8851, -0.2727, -1.5117, -0.5732]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.5799, -1.2800,  0.3295, -1.0973, -1.2557,  2.0150, -0.9786, -1.1495,
              1.2356,  0.7305],
            [-0.1378,  0.2731, -0.4081,  2.1431, -0.5673, -2.7936,  0.9460, -0.8392,
              0.0627,  1.3439],
            [-1.7478, -1.6522,  1.4206, -0.7509,  0.4730,  4.9953, -0.4824, -4.9224,
              0.2436,  2.0120],
            [-2.5281,  0.3418,  0.1945, -3.8407,  3.7551,  0.9651, -0.3849,  3.2974,
             -0.0339, -0.6462],
            [-3.3435, -0.5450,  2.6684,  2.5799,  2.8182,  1.2244, -0.8701, -3.9534,
             -0.6823,  1.4510],
            [-0.3760, -1.4122,  1.1133,  1.1203,  1.5426,  1.8146,  2.0751,  0.6293,
             -2.5284, -1.2978],
            [-0.6865, -1.0916,  2.4978,  2.4232,  0.6362, -1.3559,  1.2693,  0.2063,
             -2.1493, -0.3713],
            [ 0.4747, -1.8117, -0.3373,  4.7936, -3.8346, -0.6523,  2.3611, -5.1465,
             -1.3400,  1.7794],
            [ 0.1266, -0.9148,  1.0719,  0.2159, -0.2856,  0.5986,  2.2199,  0.4061,
             -1.7409, -0.5007],
            [ 0.0984, -0.4719,  0.0870,  1.6486, -1.3698,  0.1723,  0.3803, -2.4793,
              0.6739,  1.4796]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
