
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.2301,  6.8220,  6.1142,  2.5382,  7.6369],
            [ 5.9423,  6.4336,  4.4690,  7.4595, 13.7190],
            [ 9.4013,  6.6397,  9.4979,  1.4437, 11.6407],
            [ 2.0488, 12.4500,  5.7895,  5.2280,  6.5461],
            [ 3.8353,  9.9966,  4.2323,  8.5320,  1.0651],
            [ 2.0488,  8.4960,  7.3144,  6.2314,  6.5461],
            [ 9.4013, 11.0371,  3.2142, 15.6713, 11.6407],
            [ 5.9423,  2.2933,  0.7382,  5.3186, 13.7190]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6696,  0.5703, -0.8187,  0.0503,  1.8634,  1.0208, -0.4561, -0.6112],
            [-1.6823,  0.3271, -1.5502,  0.3618, -0.7729,  0.2428,  0.0586,  1.7268],
            [-1.6028, -0.8110,  1.2443, -0.1040,  0.8392, -1.2696, -1.3890, -0.1331],
            [ 1.2168,  0.1229,  0.5222, -0.1766, -0.2866,  0.4729,  0.7942, -0.5540],
            [-0.5835, -0.2588, -0.2384,  1.9234,  2.0126, -0.2803,  1.4748, -0.4398],
            [ 0.5083, -0.0600,  1.1093, -0.3868,  0.3397, -0.7687, -0.2130, -0.0642],
            [ 0.5712, -1.5037,  0.3999, -0.7652, -1.1867, -0.8850,  1.0636,  0.6702],
            [ 1.1042, -0.6806,  1.3417,  0.6892, -0.5821, -0.0356,  1.0013, -1.5936]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9185, -0.6574,  0.1663],
            [ 0.4394,  0.9616,  0.9761],
            [ 0.6150,  0.7301,  0.9477]], requires_grad=True), Parameter containing:
    tensor([[0.3342]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2261,  1.7164, -0.0864, -0.1046,  1.2125,  1.7767, -0.2703, -3.0950],
            [ 0.1592, -0.3451, -1.3444, -4.4773, -1.6623, -1.6224, -3.3105, -2.8409],
            [-2.4094, -3.0697, -3.9098, -1.6817,  4.1938,  1.7340,  0.9380,  2.2400],
            [ 2.3450, -0.4189, -0.0170, -0.1464,  2.9499,  1.2969,  2.2863,  0.5564],
            [ 1.4977,  3.2623,  1.3354, -2.2996,  2.8341,  0.7808, -0.9421,  0.4781],
            [-1.4877, -0.8486, -0.1825, -0.3164,  2.1676,  2.1107, -0.6311,  0.8771],
            [ 2.7242,  0.5300, -1.8457, -1.8811,  0.8699, -0.8134, -2.9218,  0.3438],
            [-0.0825, -1.2241, -1.8483, -0.9221, -2.4595, -2.4890, -1.8933,  0.1290]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3632, -0.8297, -1.2698, -0.2360, -0.4976, -0.8726, -1.0688,  1.4366,
              1.4845, -0.3406],
            [ 1.8478,  1.2291,  1.4575,  2.3890,  0.6378,  1.3820,  1.7981, -0.3150,
             -1.7617, -1.8526],
            [-2.2037, -2.6011, -3.0926,  0.9361, -0.0222, -0.7043,  1.4845,  0.4203,
             -0.2579, -1.0500],
            [-0.0968,  0.3949,  0.8763,  2.8376,  0.6997,  0.2905,  0.8536,  0.1590,
             -0.2543,  0.9887],
            [ 0.7622,  1.8600,  2.8903, -1.4025, -1.0403,  0.7416, -1.1223, -1.7026,
             -0.9375,  0.0579],
            [ 0.4467, -0.7167, -3.3703, -4.5522, -4.3121, -2.3616, -3.1530,  0.8576,
              1.7216, -0.2358],
            [-0.2917, -1.3176, -3.8155, -2.4092, -0.8885,  0.6171, -1.3027,  0.3711,
              0.7844, -0.8569],
            [ 0.0129, -1.2951, -3.6195, -1.7672, -2.1412,  1.3977, -0.8378, -2.8689,
             -2.1953, -1.0126],
            [-0.9239, -2.1498, -2.3277, -0.1211,  1.7739,  1.9867,  0.4647,  0.2068,
              1.7531,  0.7634],
            [-0.7352, -0.8541, -1.1071,  0.7683,  1.7701,  1.5552,  1.3621,  0.6669,
              2.0532,  1.1785]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.572 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
