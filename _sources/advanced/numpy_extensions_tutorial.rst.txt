
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.9463,  6.7246, 15.9059,  3.9116,  2.6005],
            [ 5.0621,  7.7649,  3.3254,  6.4838,  3.3051],
            [ 8.3844,  9.0257, 12.2284,  4.4308, 11.3471],
            [ 0.6689,  6.8042,  3.3005,  9.6341,  6.6302],
            [ 4.6180,  8.3570,  7.5511,  5.7217,  6.8372],
            [ 0.6689,  8.4239,  7.0193, 14.2465,  6.6302],
            [ 8.3844,  7.2139,  0.3483,  5.5325, 11.3471],
            [ 5.0621,  3.0109,  6.5717, 13.4175,  3.3051]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0237,  1.3393, -0.1145,  0.5851,  1.3154,  0.4615, -2.2011, -0.4610],
            [ 0.7261,  0.8138, -0.9749,  0.6366,  1.8710, -0.1610, -0.5817,  0.0195],
            [ 0.1612, -1.4789,  0.6982, -1.1000,  1.8436,  0.0862,  0.7565, -0.0573],
            [-0.0174,  0.2677, -0.2967, -0.6111, -0.4326,  0.0805, -1.7699, -0.3154],
            [ 0.0093,  2.0114, -0.2366, -0.0572, -0.4943, -0.1733,  0.4818, -1.7984],
            [ 2.2443, -1.8121, -0.6563, -0.4004, -0.1727,  1.2501, -1.3407,  0.5623],
            [ 0.4638, -0.9966, -0.8231,  1.4885,  0.3367, -0.0284,  0.3542, -2.0126],
            [-0.7579, -0.8334, -1.7344, -0.0699,  0.2179, -0.2099,  0.4756, -0.2991]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0298,  1.1851, -1.1381],
            [ 0.9570,  1.0172,  0.1767],
            [-0.6284,  0.6785, -0.0291]], requires_grad=True), Parameter containing:
    tensor([[0.5947]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2072,  2.8119,  2.8289, -0.1786,  3.5341, -1.8028, -0.6028, -0.7926],
            [ 3.3621,  2.0496,  0.4932,  0.7709,  0.1229,  0.4453,  2.7918,  2.2334],
            [ 0.1274,  4.0219,  5.4451, -3.6612,  1.6726, -0.5781, -0.6828,  1.5161],
            [-1.7346, -1.2553,  1.6753, -2.2284,  5.0689, -0.8499, -1.5944,  6.0592],
            [ 5.1478, -1.1342,  0.7580, -3.3483, -0.3194, -1.9999, -2.2558,  3.3118],
            [ 3.8078,  2.8522,  5.0016,  1.3018,  0.2899, -0.4549, -1.7720, -0.2555],
            [ 0.7978, -0.6130,  3.5303,  1.2139,  3.2189, -0.1601,  3.5461,  3.0885],
            [-0.1822, -0.4228, -1.7939,  1.1233,  3.6663, -3.0743,  0.3450,  3.2783]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.9270e-03,  1.7465e-01, -8.9504e-01,  1.3447e+00,  1.6338e+00,
             -3.4657e+00,  1.9917e+00, -7.7265e-01,  1.7612e+00, -1.7145e+00],
            [ 1.4097e-01, -9.9481e-01, -1.1797e+00,  4.1026e+00,  2.6341e+00,
              1.3991e-01, -3.8076e+00,  4.3782e+00, -7.8280e-01,  2.1339e+00],
            [-5.5871e-01, -1.2895e+00, -1.0292e+00,  5.6465e-01,  2.5792e+00,
             -1.4026e+00,  2.3213e+00, -5.4485e+00,  1.0889e+00, -1.0779e+00],
            [ 4.3270e-01,  1.5756e+00,  2.9209e+00, -1.5620e+00, -2.4667e+00,
              3.6321e+00, -2.8772e+00,  2.3738e+00, -1.1593e+00,  5.2136e-01],
            [-1.8288e-01, -4.4748e-01,  1.3483e+00,  1.1476e+00,  4.4112e+00,
             -3.3588e+00,  2.5936e+00, -3.0493e+00,  1.9405e+00,  3.9149e-01],
            [-7.4186e-01, -4.2444e+00, -3.5352e+00, -1.6359e+00, -1.4628e+00,
             -4.1105e-01, -3.8581e+00, -1.5322e+00, -2.2191e+00,  3.7676e-01],
            [-2.1028e-01, -2.0224e+00,  1.6336e-01, -2.7991e+00,  2.1587e+00,
              1.3009e-01,  1.8045e+00, -9.9808e-01,  1.5320e+00, -6.6322e-01],
            [-2.0634e-02, -6.0953e-01, -1.6986e+00, -1.4821e+00, -1.6336e+00,
             -1.5824e+00, -1.4282e+00, -1.2679e+00,  6.2214e-01, -9.8169e-01],
            [ 2.1308e-01, -1.2288e+00, -2.9453e-01, -1.7241e-01,  4.6127e-01,
              1.7257e+00,  2.0395e+00,  5.2205e-01,  1.4551e+00,  1.5324e-01],
            [ 9.3766e-02,  2.9700e-01, -2.8672e-01, -2.3354e-01, -7.6473e-02,
             -6.7889e-01,  6.3824e-01, -3.1107e-01,  6.3392e-01, -2.7844e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.583 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
