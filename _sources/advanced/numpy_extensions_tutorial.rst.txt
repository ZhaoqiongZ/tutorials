
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.6414,  2.1691,  6.6283,  6.9155,  1.7284],
            [ 6.0399, 10.2091,  3.1118,  3.9042,  8.9275],
            [11.7499, 15.0570,  9.1601,  6.4204,  8.4474],
            [ 8.7960,  5.6308,  4.2896, 10.9391,  6.1735],
            [ 3.5762,  4.6919,  5.5931,  3.9079, 10.3481],
            [ 8.7960, 11.3148,  2.9049,  4.4804,  6.1735],
            [11.7499,  4.7491, 10.4522, 10.8984,  8.4474],
            [ 6.0399,  4.4603,  5.1963,  4.6288,  8.9275]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 9.3864e-01, -4.2130e-01, -6.0468e-02,  3.7780e-01, -2.8956e-01,
             -1.7083e+00,  3.2014e-01, -6.1131e-02],
            [-3.8371e-01, -1.0612e+00,  5.6078e-01, -1.1438e+00,  1.4571e+00,
             -7.0906e-01, -1.1139e-01,  1.9179e-02],
            [-6.4792e-01,  2.0782e+00,  8.3848e-01, -1.3688e+00,  5.2639e-01,
              1.3523e-01,  3.7084e-01,  8.4767e-02],
            [ 1.1459e+00,  1.0968e+00,  1.0834e+00,  1.4709e+00, -1.5315e-03,
             -1.2096e-01,  9.9018e-01,  6.1289e-01],
            [-1.1748e+00, -1.1666e+00, -1.6884e+00, -5.7856e-02, -3.4366e-01,
              1.2749e+00,  1.5290e+00,  1.8589e+00],
            [-1.0718e+00, -6.7756e-01,  4.7605e-01, -2.2144e-01,  1.0724e+00,
             -1.5246e+00,  1.1723e-01,  3.9403e-01],
            [-1.7099e-01,  1.0359e+00,  2.2652e+00,  1.2753e+00, -5.7284e-01,
              1.8945e+00, -6.9060e-01,  2.2784e-01],
            [-4.1749e-02,  9.8558e-01,  2.0434e-02,  5.1591e-02, -5.6857e-01,
             -6.0567e-01, -2.0932e-01, -6.9447e-02]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8516, -0.1593, -0.0510],
            [-1.0128,  0.6500,  0.9547],
            [ 0.0557,  0.5919,  0.0392]], requires_grad=True), Parameter containing:
    tensor([[0.9011]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.1770, -2.5257,  0.7381,  1.5743, -0.2083,  1.5808,  1.4134, -1.4191],
            [ 1.4978, -1.1777,  3.5077,  4.3172,  4.8076,  0.4335,  0.7191,  3.6818],
            [-3.4636,  0.2507,  2.7243,  1.7602, -2.0607,  3.0166,  1.9287,  5.3021],
            [ 1.9900,  1.1549,  0.4259,  1.0850,  6.0041, -1.2436,  0.3194,  1.3298],
            [-4.0155,  3.2328,  0.0117,  3.4751,  0.3974, -0.5808, -4.0858,  2.0687],
            [ 3.2796,  1.3135,  1.4874,  0.1435,  0.4980,  1.3797,  4.0046,  2.8638],
            [ 4.5361, -2.4192,  2.7938,  3.9373,  2.0173, -2.9893,  0.3200, -0.6264],
            [ 0.4054,  6.0511, -0.0734,  0.1946,  0.9627,  4.0067, -0.9026, -1.4391]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1515, -2.3482, -0.8758,  4.5487,  2.2067,  1.1213, -1.2309, -1.0420,
              0.1224,  0.0300],
            [ 0.9382,  0.5874, -2.9396, -1.7848, -2.7610,  4.1349,  1.0064,  3.0978,
             -1.0561, -0.6187],
            [ 2.7305, -1.7295, -0.0675, -6.6763,  0.8732, -0.6892, -3.5780, -2.3252,
             -0.0665,  1.0760],
            [-0.5653,  3.6059,  2.2112, -2.7983,  0.2909, -3.1750,  2.2485, -3.1943,
             -2.0819, -0.7719],
            [ 0.1920,  2.1960, -2.0735,  0.3755, -0.4920, -0.8146,  0.8173, -3.8882,
             -0.6321, -0.7669],
            [-2.4871, -1.3010,  2.3801,  1.2291, -1.2063, -5.6521,  2.6733,  3.7338,
             -0.8919, -1.6553],
            [ 3.2333, -3.4456, -1.0297, -1.2203, -2.0496,  2.6950, -1.9468,  0.4455,
              0.3557,  0.3759],
            [-2.1501,  2.5149, -4.0034, -2.4362, -1.9709,  1.9194, -0.4361, -2.2158,
              0.8875,  1.1680],
            [ 0.5893, -0.0675,  0.5107, -0.6844, -1.0577, -1.6791, -1.7775,  1.1518,
              1.0274, -0.3671],
            [-0.0290, -0.2931,  0.0372, -1.1339, -0.3988, -0.6397,  0.2510,  0.3787,
             -0.2307, -0.0170]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
