
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.5763,  6.8739,  4.9724,  4.3621, 10.3863],
            [ 6.0771,  4.3340, 12.0272,  5.5852,  2.5908],
            [ 5.4369,  9.8768,  1.1171,  7.6082,  5.7174],
            [ 2.0533,  1.4266, 12.8820,  4.1904, 13.0300],
            [ 5.5033,  5.1468,  4.7324, 14.0271,  8.0421],
            [ 2.0533, 11.5066,  7.2876,  8.6636, 13.0300],
            [ 5.4369,  1.8159, 12.8952,  5.3700,  5.7174],
            [ 6.0771,  7.1672,  4.5292,  6.4770,  2.5908]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-9.9260e-01,  7.6869e-01,  2.1708e-01,  5.8755e-01, -2.0389e+00,
              1.0098e+00, -7.4193e-01, -1.6657e+00],
            [-1.8440e+00,  9.4581e-02,  4.0360e-01,  4.9239e-01,  2.3646e-02,
             -7.3325e-03, -1.4203e+00, -2.5295e-01],
            [ 5.6400e-01, -9.8966e-01, -1.6253e+00, -9.1835e-01,  1.1847e+00,
             -1.5741e+00, -9.0237e-01,  1.2652e+00],
            [-8.9984e-01,  6.3243e-01, -1.5810e-02,  4.2049e-02,  9.4680e-01,
              1.3198e-03, -9.8198e-01,  1.1879e+00],
            [ 2.2645e-01, -7.9828e-01, -1.5524e+00,  8.7886e-01,  2.5848e-01,
              1.7175e+00, -3.5553e-01, -4.2657e-01],
            [-8.9847e-01,  1.3231e-01,  1.1788e+00,  3.6052e-01,  1.5013e-01,
             -2.1545e+00, -1.2004e-01,  8.7716e-01],
            [-3.5875e-01,  9.2443e-02,  1.1700e+00,  8.6168e-01, -1.9192e+00,
              5.7210e-01, -7.6068e-01,  2.0594e-01],
            [ 9.4317e-01,  1.2360e-01, -1.6839e-01, -1.3862e-01,  1.3641e+00,
             -9.6582e-01,  4.8425e-01, -1.0726e-01]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0608, -1.5418,  0.7005],
            [ 0.1698,  1.1913,  0.5963],
            [ 0.0353, -1.2301, -0.3169]], requires_grad=True), Parameter containing:
    tensor([[-0.7000]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2346, -3.3196, -0.7609, -3.2288,  1.1469, -3.0638,  1.1808,  4.1384],
            [-1.5302, -1.3742,  1.3882,  5.6135, -3.9190,  0.2148,  0.0840, -5.2914],
            [ 1.5191, -3.6757,  2.5643, -5.8792, -1.1753,  1.3156, -0.5973,  3.1518],
            [-3.5100,  3.6179, -1.9178, -1.1501, -2.6658, -3.7930, -4.2886, -3.6721],
            [ 2.9403, -5.3416, -1.4590, -1.6977,  4.6371,  3.0649, -0.7064,  2.1819],
            [-3.1180,  0.2549,  1.0130, -1.0037, -2.6742, -1.8280, -1.8123,  0.8208],
            [-3.3507,  1.6943, -0.1133, -0.8264, -1.4492,  0.1732, -3.2355, -1.8290],
            [ 2.5222, -3.1328, -4.0961, -0.2670, -0.6955,  0.6314, -0.9748, -0.0392]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.2657e-02,  3.3234e-01, -4.6178e-01,  9.2993e-01, -1.1888e+00,
             -5.2534e-01, -1.6804e+00,  1.8846e+00,  9.0758e-01, -6.1550e-01],
            [-8.2419e-02,  9.9533e-01, -9.7534e-01, -4.9769e-01, -2.0640e+00,
              3.9828e+00,  1.5433e+00,  3.0156e-01,  6.1648e-01, -1.5828e+00],
            [-2.1030e-01,  1.1230e+00,  1.0268e+00, -1.3953e-01,  4.2522e-01,
             -2.3501e-01, -4.6569e+00,  4.3152e-01, -1.1488e+00, -4.7027e-01],
            [-2.8222e-01,  7.4752e-01, -3.4333e+00,  3.4180e+00, -6.0505e+00,
              3.5016e+00,  1.9111e+00,  2.5910e-01,  4.7995e+00, -4.2182e-01],
            [-1.6590e-01, -4.3620e-01,  2.4327e+00, -1.6132e+00, -1.5327e+00,
              2.6798e+00, -2.4989e+00,  7.4229e-01, -3.1898e+00, -4.5585e-01],
            [ 8.3494e-02,  8.1956e-01, -5.5115e-01,  2.4452e+00, -2.9412e-01,
             -1.6816e+00,  5.1484e-01, -1.4944e+00,  3.1015e+00,  3.9632e-01],
            [ 7.1495e-02,  8.8677e-01,  2.6421e+00, -1.2545e+00, -3.7380e+00,
              2.1077e+00, -4.7769e+00,  1.1083e+00, -4.6248e-01, -1.0813e+00],
            [-8.8648e-02, -1.4234e+00, -1.3077e+00,  6.5770e-01,  3.6091e+00,
              9.6143e-01,  5.6775e+00,  2.9331e+00,  8.2510e-01, -7.9387e-01],
            [-4.0858e-02,  4.2364e-01,  8.2841e-01, -1.3521e+00, -2.4535e+00,
             -6.9093e-02, -4.7608e+00, -3.6741e+00, -1.1465e+00, -3.4004e-01],
            [-4.1624e-03,  1.2060e-01,  8.6971e-01,  6.9867e-01,  4.7658e-01,
              1.9765e-01,  1.8595e+00,  2.0186e+00,  1.5211e+00,  2.8760e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.591 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
