
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.9921, 13.6536, 13.5815,  5.8895,  5.7565],
            [ 8.3142,  5.4186,  1.9819, 18.4880,  6.3580],
            [ 7.8130,  6.2523,  4.5753,  9.0734, 15.4597],
            [ 2.2905,  7.3481,  3.4475,  7.8395, 12.2021],
            [13.7802, 12.7590,  9.6361,  8.7534,  4.5147],
            [ 2.2905,  5.1774,  7.6034,  8.0165, 12.2021],
            [ 7.8130, 13.1853, 10.9767,  3.7123, 15.4597],
            [ 8.3142,  1.9706,  8.6583, 10.7026,  6.3580]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3241, -0.9680, -1.5660, -0.0528, -1.7332, -0.1539,  0.5443,  1.6946],
            [ 0.8057, -2.8227, -0.5707, -0.6109, -0.5569,  0.7507, -1.0651,  1.6450],
            [ 1.3133,  0.6048,  0.4647,  0.4244,  0.1988, -0.0615,  0.8336,  0.9934],
            [ 0.5203,  0.2207,  0.9284, -1.2368,  0.5262,  0.0169, -0.7004, -1.1343],
            [ 0.0755, -0.7532,  0.5347,  0.7885, -1.2485, -0.3627,  1.3894,  1.4944],
            [-1.6628,  1.7092, -2.4717,  1.1658, -0.2113, -0.9161, -0.4263,  2.2724],
            [ 1.2348,  1.0811, -0.9601,  0.0588, -1.2305, -1.5900,  3.3598,  0.3097],
            [-0.6439, -0.6025,  0.0802,  1.2065, -0.4360, -1.5397, -0.3766, -1.2493]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6411,  1.5540, -1.1046],
            [ 0.4700, -0.2863,  0.5469],
            [ 0.3045, -1.3762,  1.7865]], requires_grad=True), Parameter containing:
    tensor([[-1.7864]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.2222, -1.5608,  0.6234, -6.3637, -0.6519,  0.9639, -0.2171, -5.4489],
            [-3.9272, -4.9905,  7.2672, -9.3101, -0.7137,  1.4841,  0.5866, -5.6384],
            [ 5.2802, -5.2115, -5.4042,  6.0934, -6.6089, -4.7776,  1.9098,  0.8302],
            [-2.1141, -1.0947, -2.4111, -1.2320, -1.2745, -4.7095, -0.5789,  0.3075],
            [-7.6192,  7.3589, -6.2171, -7.1097,  8.2755, -7.5633, -3.6026, -2.3832],
            [-1.4396,  0.4324, -6.0677, -1.3749, -4.1250, -1.7401,  0.0759, -3.8239],
            [-1.9808, -3.3069, -2.7973, -1.1266, -6.7285,  4.4730, -2.1568, -5.1013],
            [-0.2860, -4.1853,  0.5506, -0.7430, -2.2604,  0.7883, -4.0614, -1.0327]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.2509e-01,  1.0463e+00, -2.5695e+00,  2.7729e+00, -3.6536e-01,
             -8.5739e-01, -3.0436e-01, -5.1254e-01,  1.3843e+00, -4.2440e-01],
            [-5.5231e-01,  1.7583e+00, -3.2713e-01, -2.4986e+00,  3.4967e+00,
             -2.0220e+00,  2.3127e+00, -3.0308e+00,  1.8708e+00, -8.9801e-01],
            [-2.5495e-01,  1.0930e+00,  4.8829e-01, -3.2527e+00,  1.1175e+00,
              1.5654e+00,  1.0478e+00, -2.1063e+00,  2.2433e+00, -1.1013e+00],
            [ 6.2223e-01, -7.7699e-01,  8.4553e-01,  1.3830e+00, -5.4917e+00,
              5.3473e+00, -6.3731e+00,  4.0698e+00, -2.7091e+00,  2.4868e+00],
            [ 8.4026e-01, -2.8950e+00,  3.8673e+00, -2.2215e+00,  1.2960e+00,
             -4.6680e-01, -1.9255e-01, -5.0932e-02, -5.1609e+00,  4.2923e+00],
            [-6.7471e-01,  1.0562e+00, -1.3660e+00,  1.6418e+00, -2.1142e+00,
             -2.0034e+00,  4.1697e+00, -4.4681e-01, -2.3550e+00,  1.5762e+00],
            [ 5.0328e-01,  5.0808e-01, -1.6440e+00,  2.8373e+00, -2.1297e+00,
             -1.0628e+00, -7.1829e-02,  3.0764e+00, -8.9738e-01, -2.2481e+00],
            [-6.4899e-03, -2.5172e+00,  5.5188e+00, -6.5597e+00,  4.3421e+00,
             -1.1208e+00, -5.5095e-01,  1.2277e+00,  3.6876e-01, -7.7439e-01],
            [ 2.3273e-01, -7.9315e-02,  2.2144e+00, -2.5330e+00,  2.0919e-01,
              8.9014e-01, -1.6216e+00, -1.0121e+00,  1.7947e-01,  2.0437e+00],
            [ 1.5994e-01, -3.8418e-01, -6.7391e-01,  2.6269e+00, -1.8195e+00,
              1.8409e+00,  3.3111e-01, -6.6937e-01, -9.9338e-01, -2.3544e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.578 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
