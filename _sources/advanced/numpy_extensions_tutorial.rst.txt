
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.3714,  2.4981,  2.2971,  6.6626,  4.9220],
            [13.3033, 10.0356,  8.5187, 11.0176,  3.7500],
            [ 8.0816,  1.8851,  4.3738,  9.8354, 10.0049],
            [ 2.7771, 11.7767, 10.6999,  9.9233,  2.5871],
            [13.4776,  5.0293,  7.2471,  8.9211,  4.7249],
            [ 2.7771, 17.8089,  1.7784,  1.2641,  2.5871],
            [ 8.0816,  8.1448,  6.2137,  6.4242, 10.0049],
            [13.3033,  7.2719,  5.5954, 13.5148,  3.7500]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5041, -1.7084,  0.1512, -0.3809, -0.1424,  0.2142, -0.3364,  1.5673],
            [-1.7372,  0.8040,  0.5637,  1.6761,  2.7526,  0.6315, -0.8322,  0.3835],
            [ 1.2627, -0.3234, -1.9529,  0.8850,  0.8102, -0.2605,  1.0254,  0.8847],
            [ 0.1975,  1.8278,  1.6978,  0.1436,  0.8887, -0.1848,  1.6069,  0.8414],
            [-0.4808,  0.6469,  0.4650,  0.3888,  1.0046, -1.4416, -0.5750, -1.4979],
            [-0.4850, -0.3174,  0.0316, -1.8727, -0.8862,  0.0607, -1.0185,  1.9609],
            [ 0.5112, -0.0597,  0.7383, -0.9673, -1.3649, -0.6164, -0.2349, -0.7692],
            [ 1.4484, -0.1826,  1.4353, -0.3111,  0.3178,  1.5096, -0.2195, -1.3077]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9267, -2.1910, -1.2859],
            [ 0.8559,  0.6048,  0.4077],
            [-1.2717,  1.5108, -1.2765]], requires_grad=True), Parameter containing:
    tensor([[0.0751]], requires_grad=True)]
    Output from the convolution:  tensor([[-7.4410, -0.3581, -5.3401, -0.6568, -5.0958, -1.3086,  6.1148,  3.6102],
            [ 1.1005, -2.3643, -4.6689,  3.2129,  0.8039, -2.7777,  2.7770, -3.1008],
            [-3.1147,  3.5839,  1.7654,  1.6099,  0.7001,  4.2425, -3.0634,  3.9815],
            [ 2.6205, -3.1476, -3.5011, -7.6415, -4.5085,  0.3718, -0.3802, -6.8521],
            [ 0.7842, -1.0072,  2.9675,  0.5733,  2.6636,  1.9666,  4.5459,  8.4119],
            [-0.5543, -4.0977,  4.3236,  0.7785,  6.3314,  4.2113,  3.5215,  0.0894],
            [ 6.0935,  8.2015,  3.9184,  3.8658,  0.9654, -2.9860,  5.5051,  4.3775],
            [ 5.3792, -2.4989, -0.7332, -6.0199,  1.8062, -3.6323, -0.2372,  4.3107]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7702, -2.9681, -2.9424,  1.2633,  2.2387,  1.3411,  0.1622,  1.6521,
              1.4145,  0.7568],
            [ 0.1140, -1.4254, -1.8827, -0.8329,  0.5446,  3.5795,  5.1149,  4.8346,
              2.1839,  0.8134],
            [-1.8112,  0.2349, -1.2376, -2.5602, -6.2081, -2.2496, -5.6021, -2.2002,
             -1.3446,  0.5377],
            [ 0.0267, -2.5947,  2.1191, -3.8628, -3.6911,  3.4307,  0.1012,  2.2209,
             -2.4649, -0.7387],
            [-1.2826,  3.6463, -4.9268,  3.0398, -5.7663, -4.6928, -6.7996, -8.3387,
             -4.0656, -1.3088],
            [ 1.7841,  1.8488,  2.7216,  2.1299,  4.7850, -2.6137,  1.4493,  2.0858,
              7.2644, -0.2173],
            [-5.8398, -1.2226, -2.5985,  5.3861,  1.4405, -0.8928,  1.7094, -7.8597,
             -2.5514, -2.7205],
            [ 2.1636, -3.9344, -2.9779,  1.2447,  3.9441,  6.9529,  6.3391, -3.5693,
             -1.5537, -0.8666],
            [-2.5801,  6.7835, -3.6107,  1.1792, -3.0789,  0.4057, -4.9330,  4.4097,
             -0.8558,  0.1334],
            [-0.7366, -0.1338, -0.4143,  2.6276, -1.7240,  0.0970,  2.4393, -2.1596,
              2.5965, -1.8836]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.580 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
