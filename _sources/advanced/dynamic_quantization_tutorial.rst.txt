
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-162

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 163-166

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 166-191

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'aroused' b'home' b'recoilless' b'taste' b'and' b'objects' b',' b'and' b'as' b'he' b'liberal' b'exhausted' b'significant' b'Key' b'@-@' b'stump' b'from' b'producing' b'jobs' b'and'
    b'intolerance' b'operated' b'from' b'<unk>' b',' b'which' b'they' b'reads' b'a' b'interpretation' b'of' b'either' b'other' b'religious' b'interactivity' b'films' b'of' b'season' b'.' b'The'
    b'player' b'indicate' b'to' b'be' b'refined' b'into' b'October' b'15' b',' b'2001' b',' b'it' b'they' b'only' b'controlled' b'(' b'entirely' b'at' b'10' b'to'
    b'5' b'\xe2\x80\x93' b'9' b'\xe2\x80\x93' b'4' b'@.@' b'8' b'in' b')' b'.' b'It' b'is' b'found' b'in' b'size' b'by' b'Dave' b'<unk>' b'in' b'Kansas'
    b'Island' b',' b'the' b'first' b'year' b'in' b'a' b'specific' b'compound' b'.' b'In' b'they' b'were' b'done' b'Kong' b'subsidies' b'at' b'FISA' b',' b'Charles'
    b'Donald' b'deter' b'II' b',' b'was' b'a' b'member' b'of' b'Henry' b',' b'as' b'formed' b'by' b'then' b'.' b'with' b'this' b'period' b'the' b'Generation'
    b'for' b'it' b'was' b'probably' b'held' b'greater' b'than' b'38' b'%' b'.' b'The' b'most' b'prominent' b'flans' b'coordinated' b'some' b'more' b'popular' b'specimens' b'\xe2\x80\x94'
    b'to' b'maintain' b'legs' b'that' b'are' b'strictly' b'In' b'full' b'salmon' b'or' b'shows' b'.' b'They' b'can' b'double' b'the' b'use' b'of' b'quality' b','
    b'in' b'particular' b',' b'a' b'M\xc4\x81ori' b'and' b'large' b'Beauforts' b'after' b'other' b'.' b'In' b'his' b'chances' b',' b'the' b'kakapo' b'was' b'distinguished' b'by'
    b'85' b'\xe2\x80\x93' b'260' b',' b'fixed' b'seconds' b',' b'which' b',' b'suit' b',' b'it' b'is' b'too' b'good' b'or' b'Hairan' b'<unk>' b'accepted' b'distracting'
    b'nearby' b'activity' b'.' b'The' b'garage' b'is' b'antimony' b'hand' b',' b'down' b',' b'observatory' b'or' b',' b'yet' b'unlike' b'over' b'10' b'ft' b'('
    b'113' b'km' b'/' b'h' b')' b'and' b'a' b'maximum' b'relate' b'it' b',' b'and' b'also' b'lands' b'up' b'by' b'moral' b'legs' b'instead' b'of'
    b'R\xc3\xa9union' b'and' b'is' b'flattened' b'subject' b'.' b'However' b',' b'Platinum' b'@-@' b'white' b'passengers' b'concerning' b'one' b'mortality' b'of' b'more' b'than' b'2' b'%'
    b'of' b'the' b'<unk>' b"'an" b'Giants' b'Bandicoot' b',' b'near' b'night' b'with' b'3' b'@.@' b'7' b'cm' b'(' b'2' b'@.@' b'1' b'in' b')'
    b',' b'at' b'a' b'larger' b'surface' b',' b'before' b'though' b'other' b'females' b'from' b'breeding' b'indirectly' b'foundation' b'(' b'their' b'version' b'of' b'pale' b'sites'
    b')' b';' b'providing' b'20' b'brown' b'reactions' b'per' b'brownish' b',' b'often' b'exception' b'in' b'refugees' b'with' b'traditional' b'populations' b'.' b'WASP' b'total' b'populations'
    b',' b'80s' b'to' b'G' b'occupy' b'or' b'yellow' b'with' b'each' b'other' b'.' b'However' b',' b'this' b'specimen' b'of' b'males' b'will' b'be' b'been'
    b'attested' b',' b'when' b'horse' b'hills' b'this' b'sound' b'.' b'Eventually' b',' b'<unk>' b',' b'ossified' b'Latino' b',' b'towers' b',' b'and' b'painful' b'Mobile'
    b'have' b'both' b"'ve" b'insufficient' b'waste' b'habitats' b'.' b'Other' b'starlings' b'may' b'be' b'found' b'on' b'Syria' b',' b'but' b'regularly' b'requires' b'food' b'or'
    b'suffering' b'a' b'world' b'or' b'Gallic' b'green' b'can' b'be' b'unabated' b'.' b'It' b'also' b'grows' b'on' b'some' b'species' b'of' b'males' b',' b'they'
    b'marry' b'across' b'spores' b'to' b'men' b'.' b'Because' b'users' b'explains' b'that' b'these' b'kakapo' b'approaches' b'of' b'water' b'bases' b'powdery' b'killing' b'<unk>' b'is'
    b'Stolac' b',' b'aroused' b'they' b'may' b'mechanized' b'to' b'boat' b'groom' b'.' b'<eos>' b'Water' b'measures' b'contain' b'bread' b'are' b'increasingly' b'rounded' b',' b'and'
    b'they' b'may' b'influence' b'a' b'sense' b'of' b'chromatin' b'-' b'its' b'kakapo' b'becomes' b'situated' b'.' b'Much' b'female' b'are' b'their' b'black' b',' b'finger'
    b',' b'military' b',' b'and' b'certain' b'directs' b'ones' b',' b'kitsunetsuki' b',' b'or' b'field' b'species' b',' b'<unk>' b'complete' b'and' b'<unk>' b',' b'and'
    b'occasionally' b'distinguish' b'their' b'death' b'near' b'the' b'East' b'Ocean' b'.' b'partial' b',' b'total' b',' b'dan' b'trees' b',' b'is' b'well' b'@-@' b'owned'
    b'repeatedly' b'they' b'can' b'children' b'spirits' b'to' b'protect' b'them' b'.' b'<unk>' b'at' b'Ireland' b'defined' b'former' b'translucent' b'efforts' b'such' b'as' b'<unk>' b','
    b'they' b'are' b'expressed' b'of' b'common' b'stones' b',' b'without' b'it' b',' b'or' b'potentially' b'firms' b',' b'or' b'threefold' b'communications' b'.' b'Also' b'these'
    b'items' b'are' b'only' b'gregarious' b'.' b'galericulata' b'may' b'ignore' b'and' b'sing' b'some' b'females' b'courage' b'bond' b'from' b'<unk>' b'the' b'price' b'of' b'fraction'
    b'and' b'thickness' b'about' b'star' b',' b'adding' b',' b'the' b'primary' b'Forerunner' b'thickness' b',' b'they' b'are' b'on' b'minimal' b'translations' b',' b'given' b'or'
    b'them' b'to' b'serve' b'a' b'range' b'statistic' b'.' b'<unk>' b'proteins' b'Round' b',' b'possibly' b'though' b'closely' b'Buddhism' b',' b'1100' b'even' b'gained' b'various'
    b'characteristics' b'for' b'other' b'potential' b'microscopy' b'throughout' b'mating' b'.' b'There' b'are' b'one' b'descending' b'M.' b'abnormalities' b'centres' b':' b'the' b'militia' b',' b'a'
    b'<unk>' b'framing' b'man' b'and' b'a' b'compound' b'toward' b'function' b'prior' b'to' b'treatment' b'.' b'It' b'is' b'generally' b'many' b'memorable' b'than' b'the' b'sea'
    b',' b'though' b'other' b'uses' b'children' b'quit' b'.' b'When' b'they' b'rarely' b'stop' b'or' b'bewitched' b'well' b'plentiful' b'broomstick' b',' b'such' b'as' b'microlights'
    b',' b'her' b'resolution' b'is' b'its' b'own' b',' b'origin' b'of' b'<unk>' b',' b'while' b'they' b'cannot' b'break' b'to' b'dismiss' b'a' b'variety' b'of'
    b'eggs' b'.' b'Only' b'pathogens' b'drug' b'<unk>' b'expression' b'methods' b'stated' b'that' b'they' b'always' b'nests' b'in' b'stored' b'them' b'without' b'the' b'steel' b'or'
    b'they' b'trailed' b'standards' b'that' b'penetrate' b'people' b'may' b'be' b'distinguished' b',' b'because' b'they' b'all' b'<unk>' b',' b'even' b'killing' b'by' b'the' b'presence'
    b'of' b'photosphere' b'.' b'<eos>' b'brood' b'trembling' b'with' b'decreasing' b'mid' b'@-@' b'species' b'habitats' b'was' b'greater' b'as' b'examples' b'of' b'a' b'small' b'state'
    b'except' b'.' b'A' b'large' b'beak' b'called' b'a' b'assessment' b'of' b'food' b',' b'either' b'from' b'<unk>' b'and' b'leukemia' b',' b'but' b'at' b'least'
    b'once' b'her' b'egg' b'bearing' b'or' b'openings' b',' b'they' b'accept' b'a' b'<unk>' b'or' b'stocks' b'with' b'it' b':' b'they' b'readily' b'<unk>' b'begins'
    b'prior' b'to' b'four' b'cun' b'legs' b'by' b'other' b'females' b'backwards' b'.' b'There' b'may' b'even' b'make' b'examples' b'towards' b'Wales' b',' b'when' b'there'
    b'has' b'grown' b'increasingly' b'tolerant' b'to' b'be' b'used' b'to' b'mate' b'when' b'no' b'behaviour' b'are' b'that' b'represented' b'change' b'Parvati' b'and' b'leaves' b'its'
    b'dirty' b'legs' b'at' b'mating' b'.' b'On' b'response' b'they' b'escapes' b'in' b'Egyptian' b'areas' b',' b'they' b'frequently' b'playing' b'body' b'beings' b'.' b'As'
    b'it' b'has' b'somehow' b'foxes' b',' b'the' b'kakapo' b'<unk>' b'down' b'professionally' b'to' b'avoid' b'animal' b'birds' b'and' b'give' b'their' b'non' b'@-@' b'routine'
    b'pattern' b',' b'where' b'in' b'.' b'German' b'families' b'include' b'heat' b'by' b'many' b'species' b',' b'develop' b'West' b'and' b'growing' b'items' b'to' b'keep'
    b'blow' b'is' b'widely' b'visible' b'by' b'even' b'lacks' b'any' b'other' b'areas' b'having' b'subdivided' b'back' b'them' b'up' b'and' b'containing' b'effect' b'of' b'them'
    b'.' b'Males' b'usually' b'migrate' b'they' b'are' b'controlled' b'by' b'and' b'<unk>' b'Measure' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Similar' b'species' b'=' b'='
    b'<eos>' b'<eos>' b'The' b'metallic' b'starling' b'(' b'composition' b'called' b'for' b'weather' b')' b'is' b'a' b'pre' b'@-@' b'19th' b'century' b'on' b'Restaurant' b'prey'
    b'and' b'2' b'\xe2\x80\x93' b'5' b',' b'9' b',' b'or' b'18' b'@.@' b'4' b'metres' b'(' b'0' b'@.@' b'8' b'sq' b'km' b')' b'.'
    b'The' b'deep' b'starling' b'has' b'also' b'ribosomes' b'on' b'it' b',' b'four' b'other' b'.' b'It' b'may' b'be' b'shaped' b'<unk>' b',' b'originating' b'as'
    b'they' b'will' b'be' b'listed' b'in' b'its' b'peak' b'resistance' b',' b'and' b'they' b'are' b'different' b'to' b'layered' b'females' b'and' b'establish' b'females' b'.'





.. GENERATED FROM PYTHON SOURCE LINES 192-197

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 197-242

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 243-252

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 252-260

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 261-263

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 263-272

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 273-277

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 277-289

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.2
    loss: 5.168
    elapsed time (seconds): 112.5




.. GENERATED FROM PYTHON SOURCE LINES 290-301

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  16.704 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
