
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'is' b'led' b'in' b'Greenland' b',' b'was' b'moved' b'into' b'a' b'ocean' b'<unk>' b'entitled' b'<unk>' b',' b'a' b'tactic' b'for' b'the' b'adult' b'Anthology'
    b'(' b'for' b'a' b'dark' b')' b'...' b'the' b'wives' b'eat' b'in' b'his' b'<unk>' b'case' b'council' b'and' b'<unk>' b'together' b'plants' b'.' b'"'
    b'The' b'Lotus' b'aspect' b'of' b'Quest' b'.' b'"' b'Because' b'March' b'420' b',' b'two' b'thousand' b'%' b'of' b'the' b'two' b'children' b'could' b'be'
    b'confused' b'.' b'rapids' b'seeks' b'year' b'on' b'the' b'south' b'with' b'The' b'Woodstock' b'occupational' b'.' b'His' b'successor' b'hangs' b'on' b'retrospective' b'interphase' b'light'
    b',' b'its' b'creatures' b'being' b'completed' b'for' b'a' b'mad' b'\xc2\xb2' b'commonly' b'regarded' b'as' b'"' b'a' b'combination' b'of' b'the' b'city' b'"' b'.'
    b'<eos>' b'<eos>' b'<eos>' b'=' b'where' b'Ceres' b',' b'dealt' b'in' b'1975' b'=' b'<eos>' b'<eos>' b'Joseph' b'galericulata' b'is' b'a' b'species' b'of' b'development'
    b'dating' b'north' b'as' b'cardiac' b'element' b',' b'with' b'each' b'Raffles' b'as' b'experienced' b'as' b'a' b'planet' b'amateur' b'by' b'Kenneth' b'diplomatic' b'grass' b'in'
    b'our' b'village' b'and' b'<unk>' b'.' b'As' b'a' b'result' b',' b'it' b'has' b'recently' b'sold' b'of' b'his' b'aspects' b'.' b'He' b'incorporate' b'up'
    b'it' b'a' b'actual' b'solid' b'@-@' b'frequency' b',' b'Adore' b'literate' b',' b'the' b'water' b',' b'teeth' b',' b'resolute' b'"' b'pine' b',' b'or'
    b'Hui' b'"' b'as' b'"' b'fine' b'"' b'(' b'display' b'Mana' b')' b',' b'and' b'female' b'bodies' b'(' b'possibly' b'a' b'blue' b'singer' b')'
    b'as' b'it' b'must' b'be' b'controlled' b'by' b'being' b'a' b'irregular' b'flora' b'and' b'slightly' b'Robert' b'Featuring' b'down' b'that' b'are' b'corresponds' b';' b'little'
    b'common' b'books' b'ranging' b'down' b',' b'if' b'the' b'<unk>' b',' b'calls' b'with' b'quasi' b'II' b'and' b'difficulty' b'an' b'few' b'TWA' b',' b'the'
    b'image' b'of' b'its' b'eyes' b',' b'it' b'<unk>' b'the' b'definition' b'of' b'a' b'young' b'.' b'In' b'and' b'Facebook' b',' b'he' b'contained' b'comparisons'
    b'to' b'other' b'give' b'steps' b'something' b'\xe2\x80\x93' b'a' b'late' b'romantic' b'man' b'.' b'The' b'female' b'is' b'accompanied' b'by' b'the' b'breakup' b'of' b'276'
    b',' b'and' b'but' b'the' b'<unk>' b'literally' b'argues' b'Bob' b'describes' b'us' b'to' b'<unk>' b'for' b'him' b';' b'their' b'male' b'is' b'an' b'irregular'
    b'bird' b'.' b'Bad' b'frustrated' b'some' b'certain' b'starlings' b',' b'when' b'it' b'is' b'noted' b'that' b'holds' b',' b'"' b'trusting' b'an' b'good' b'end'
    b'of' b'needs' b',' b'natural' b',' b'get' b'Gyakuten' b'S.' b'brooches' b',' b'a' b'life' b'was' b'so' b'ionization' b',' b'and' b'some' b'meet' b'that'
    b'had' b'a' b'tough' b',' b'around' b'soul' b'"' b'.' b'The' b'Circus' b'planet' b'recommend' b'a' b'tongue' b'against' b'48th' b'Holocaust' b'of' b'Nest' b'such'
    b'as' b'native' b'Maharashtra' b'Gardner' b',' b'mRNA' b'<unk>' b',' b'and' b'the' b'shores' b'body' b'.' b'In' b'the' b'naked' b'study' b'of' b'which' b'robins'
    b',' b'its' b'new' b'external' b'sisters' b'is' b'reliably' b'absorbed' b'to' b'belong' b'a' b'cell' b'and' b'finds' b'purple' b',' b'on' b'1997' b'.' b'The'
    b'colour' b'of' b'their' b'cabinet' b'Central' b'main' b'ceratopsids' b'would' b'be' b'connected' b'and' b'subsequently' b'remained' b'.' b'However' b',' b'by' b'Tumtum' b'Ravidass' b','
    b'spored' b'to' b'catch' b'@-@' b'astute' b'dust' b'areas' b'with' b'protein' b'entire' b'volume' b',' b'they' b'describes' b'migrate' b'to' b'the' b'foreigners' b'of' b'Were'
    b'.' b'When' b'throughout' b'its' b'predecessor' b',' b'they' b'contain' b'into' b'completely' b'thus' b'immature' b'by' b'the' b'notion' b'of' b'tail' b'and' b'1560' b'.'
    b'<eos>' b'=' b'=' b'=' b'Human' b'@-@' b'motorcycle' b'<unk>' b',' b'interchange' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Angelo' b'elegans' b'contains' b'Walter' b'Waldo'
    b'nails' b'(' b'God' b'of' b'<unk>' b')' b'.' b'A' b'female' b'acknowledges' b'he' b'has' b'flies' b'to' b'Parvati' b'temperatures' b'from' b'hills' b',' b'but'
    b'their' b'gills' b'discover' b'that' b'they' b'are' b'short' b'.' b'As' b'they' b'female' b'really' b'inflict' b'food' b'or' b'assigned' b',' b'the' b'Pacific' b'is'
    b'there' b'to' b'embarrass' b'<unk>' b'.' b'Gaelic' b'species' b'is' b'watches' b',' b'directly' b'@-@' b'abdomen' b',' b'and' b'confused' b'scribal' b'relief' b'.' b'They'
    b'Found' b'drug' b'care' b',' b'and' b'<unk>' b'Far' b'mammals' b'have' b'eventually' b'been' b'short' b'(' b'non' b'@-@' b'<unk>' b')' b'and' b'broadly' b'derived'
    b'by' b'some' b'species' b'\xe2\x80\x94' b'which' b'must' b'find' b'one' b'of' b'fund' b'tissues' b'.' b'There' b'are' b'only' b'one' b'attempts' b'to' b'refer' b'to'
    b'an' b'more' b'acceptable' b'environmental' b'rate' b'of' b'agonist' b'and' b'so' b'<unk>' b'their' b'own' b'process' b'.' b'It' b'also' b'speaks' b'males' b'from' b'a'
    b'bright' b'burn' b',' b'<unk>' b'with' b'more' b'beauty' b',' b'so' b'believed' b'to' b'have' b',' b'since' b'some' b'windows' b'wed' b'\xe2\x80\x99' b's' b'and'
    b'low' b',' b'as' b'stole' b',' b'they' b'"' b'see' b'very' b'pain' b'"' b'.' b'theirs' b'then' b'served' b'as' b'bimonthly' b',' b'there' b'are'
    b'northern' b'"' b'bowls' b'"' b'over' b'the' b'female' b'unfortunately' b',' b'including' b'rituals' b'being' b'rowed' b'to' b'fulfil' b'Lohan' b"'s" b'binaries' b'.' b'Common'
    b'starlings' b'make' b'19th' b'characteristics' b',' b'<unk>' b'stewardship' b'and' b'chemical' b'parallels' b'.' b'No' b'grows' b'is' b'then' b'connected' b'time' b'to' b'the' b'panel'
    b'of' b'atmosphere' b'and' b'speculated' b'it' b'may' b'be' b'found' b'to' b'collect' b'them' b'.' b'According' b'to' b'their' b'aluminum' b'precise' b'increase' b'with' b'off'
    b',' b'they' b'must' b'maintain' b'food' b'@-@' b'prey' b'into' b'the' b'kakapo' b'.' b'Condoms' b'have' b'prefers' b'serves' b'as' b'a' b'to' b'wonder' b'.'
    b'<unk>' b',' b'greatly' b'as' b'they' b'.' b'When' b'as' b'tell' b',' b'they' b'appear' b'in' b'temperate' b'breeding' b'.' b'contacts' b'he' b'escalated' b'into'
    b'German' b'harm' b'<unk>' b'throughout' b'his' b'teeth' b'and' b'neutrons' b'for' b'them' b'to' b'show' b'her' b'stage' b'.' b'Known' b'have' b'a' b'fleeing' b'large'
    b'rate' b'of' b'<unk>' b'that' b'are' b'<unk>' b',' b'particularly' b'in' b'violet' b',' b'and' b'they' b'found' b'down' b'them' b'for' b'feeding' b'reproductive' b'.'
    b'One' b'of' b'a' b'eggs' b'every' b'relative' b'group' b'will' b'involve' b'significant' b'and' b'holding' b'an' b'sufficiently' b'dwarf' b'mB\xc3\xb3' b'than' b'those' b'<unk>' b'.'
    b'Private' b'image' b'cried' b'with' b'larger' b'advancement' b',' b'may' b'precaution' b'throughout' b'83' b'minutes' b',' b'with' b'lauded' b'its' b'length' b'.' b'Other' b'common'
    b'deities' b'seems' b'to' b'begin' b'to' b'find' b'flock' b'kids' b'when' b'upcoming' b',' b'they' b'cannot' b'be' b'halted' b'an' b'application' b'it' b'against' b'that'
    b'may' b'be' b'the' b'largest' b'language' b'of' b'breaking' b'a' b'wedding' b'flight' b'behind' b'.' b'After' b'some' b'their' b'even' b'difference' b',' b'it' b'does'
    b'not' b'decide' b'to' b'avoid' b'such' b'when' b'it' b'often' b'exist' b'that' b'they' b'make' b'food' b'politicians' b',' b'with' b'particular' b'being' b'mountain' b'<unk>'
    b'to' b'head' b'.' b'They' b'grows' b'in' b'the' b'cytoplasm' b',' b'whether' b'balls' b'encoding' b'gas' b'of' b'certain' b'males' b'in' b'some' b'ways' b'decreases'
    b'Shields' b'stand' b'by' b'their' b'mid' b'@-@' b'spored' b'.' b'penultimate' b',' b'it' b'is' b'scared' b'that' b'the' b'birds' b'must' b'be' b'Colima' b'.'
    b'<eos>' b'Ceres' b'will' b'be' b'amber' b'constrained' b'as' b'they' b'spread' b'with' b'statues' b'.' b'Their' b'<unk>' b'regency' b'will' b'be' b'spreading' b'organism' b'with'
    b'<unk>' b',' b'facing' b'down' b'seats' b'slightly' b'stalled' b'so' b'offer' b'to' b'other' b'eggs' b'.' b'This' b'behavior' b'may' b'be' b'counties' b'and' b'said'
    b',' b'"' b'that' b'they' b'have' b'to' b'be' b'useful' b'that' b'they' b'hope' b'how' b'you' b'may' b'never' b'have' b'been' b'midsummer' b'.' b'"'
    b'Nationwide' b',' b'it' b'is' b'played' b'as' b'they' b'collect' b'a' b'predator' b'as' b'they' b'are' b',' b'and' b'very' b'fewer' b'pass' b'.' b'Meanwhile'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 201.5
    loss: 5.168
    elapsed time (seconds): 111.4




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  22.175 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
