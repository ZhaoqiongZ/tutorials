
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-162

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 163-166

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 166-191

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'The' b'urban' b'American' b'population' b'of' b'clinic' b'prompted' b'in' b'Taiwanese' b'bonuses' b'as' b'deep' b'as' b'it' b'conjectured' b'up' b'it' b'.'
    b'The' b'Gaelic' b'numbers' b'of' b'there' b'also' b'dynamically' b'measurements' b'of' b'operations' b',' b'and' b'under' b'first' b'other' b',' b'regard' b'food' b'until' b'extends'
    b',' b'<unk>' b'notes' b'was' b'gather' b'by' b'"' b'the' b'Aribi' b'"' b'.' b'It' b'has' b'the' b'same' b'organisation' b'since' b'<unk>' b'orbit' b'and'
    b'black' b'birds' b'.' b'Because' b'despite' b')' b'rapidly' b',' b'Robyn' b'first' b'taught' b'trying' b'to' b'create' b'campgrounds' b'from' b'<unk>' b',' b'is' b'educated'
    b'by' b'a' b'<unk>' b'camp' b'while' b'<unk>' b'spoke' b'to' b'178' b'God' b'beyond' b'some' b'of' b'its' b'downloadable' b'countries' b'.' b'The' b'crew' b'forfeited'
    b'1264' b'from' b'Dublin' b',' b'but' b'when' b',' b'as' b'this' b'book' b'suggests' b'it' b'might' b'be' b'"' b'temporary' b'and' b'driving' b',' b'aims'
    b'to' b'acknowledge' b'the' b'face' b'into' b'the' b'battlefield' b'Conoc\xc3\xad' b',' b'and' b'even' b'they' b'have' b'a' b'striving' b'to' b'defend' b'themselves' b'to' b'take'
    b'even' b'gives' b'a' b'total' b'more' b'square' b'deities' b'on' b'him' b'.' b'"' b'In' b'2008' b',' b'this' b'stage' b'225' b'suffered' b'Park' b'species'
    b'for' b'Demographics' b'were' b'kept' b'in' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Britain' b'and' b'extra' b'training' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'common' b'starling' b'talks' b'are' b'understated' b'and' b'threatened' b'unchanged' b'throughout' b'grape' b'areas' b'.' b'A' b'common' b'amount' b'of' b'sections' b'or'
    b'pressure' b'<unk>' b'farming' b'or' b'weaker' b'dust' b'was' b'mainly' b'at' b'high' b',' b'and' b'there' b'have' b'an' b'long' b'jump' b'or' b'parallel' b'eggs'
    b'in' b'age' b',' b'and' b'.' b'The' b'weight' b'of' b'<unk>' b',' b'the' b'50' b'Amedeo' b'or' b'pupils' b',' b'NCAA' b'beak' b',' b'distribution'
    b'preventing' b'my' b'body' b',' b'and' b'does' b'not' b'be' b'arrested' b'<unk>' b'@-@' b'Halswell' b'reader' b'grayish' b'Testosterone' b'and' b'Arabic' b'disposed' b',' b'but'
    b'not' b'<unk>' b'from' b'eyes' b',' b'and' b'<unk>' b'part' b'jam' b'XeOF' b'for' b'other' b'to' b'a' b'mammals' b'.' b'overwhelming' b'eggs' b'are' b'aside'
    b',' b'and' b'most' b'accurate' b'results' b'early' b'their' b'major' b'size' b'.' b'Carleton' b'are' b'calculated' b'@-@' b'by' b'@-@' b'present' b'proportions' b'for' b'a'
    b'removal' b'or' b'develop' b'near' b'head' b'strumming' b'.' b'The' b'railhead' b'cycle' b'means' b'it' b'to' b'<unk>' b'both' b'.' b'The' b'spores' b'include' b'Mycena'
    b'slippage' b',' b'Kevin' b'Carl' b'<unk>' b',' b'enslaved' b'emetic' b'and' b'cm3' b',' b'can' b'Lohan' b'mid' b'@-@' b'14' b'species' b'(' b'the' b'stem'
    b')' b',' b'and' b'the' b'Decatur' b'with' b'two' b'more' b'constitutional' b'people' b'and' b'aid' b'those' b'or' b'apartheid' b'prey' b'.' b'Their' b'competitors' b'are'
    b'uncertain' b'to' b'search' b':' b'<eos>' b'There' b'are' b'no' b'more' b'predators' b'who' b'do' b'not' b'have' b'question' b'with' b'any' b'other' b'series' b','
    b'which' b'their' b'experiences' b'is' b'.' b'The' b'respective' b'dimensions' b'calls' b'the' b'final' b'formation' b'of' b'the' b'role' b'of' b'Lima' b'@-@' b'gradually' b'psychiatric'
    b'sound' b'being' b'seen' b'to' b'be' b'killed' b'.' b'If' b'songs' b',' b'they' b'survived' b'on' b'their' b'wings' b',' b'<unk>' b',' b'which' b'modification'
    b'myself' b'to' b'distinguish' b'or' b'Arctic' b',' b'often' b'to' b'be' b'built' b'.' b'Their' b'eyes' b'where' b'they' b'often' b'sometimes' b'eat' b'<unk>' b'Home'
    b',' b'should' b'attempt' b'home' b'a' b'console' b'<unk>' b'in' b'style' b'or' b'ossified' b'when' b'they' b'know' b'that' b'they' b'return' b'out' b'that' b'toxic'
    b',' b'if' b'mobbing' b'everybody' b'we' b'inflicted' b'activities' b'up' b'into' b'no' b'threats' b'.' b'Thirty' b'@-@' b'spored' b'who' b'quickly' b'exercise' b'other' b'even'
    b'incorrectly' b'from' b'1961' b';' b'they' b'La' b'Power' b',' b'a' b'eye' b'Officially' b'in' b'<unk>' b',' b'a' b'associates' b'core' b'to' b'one' b'murder'
    b'of' b'the' b'star' b"'s" b'life' b'.' b'But' b'not' b'romantic' b',' b'they' b'aren' b"'t" b'die' b'so' b'could' b'say' b'it' b'torrential' b'possibilities'
    b'"' b'.' b'<unk>' b'is' b'widely' b'found' b'Kavkaz' b'a' b'cave' b',' b'but' b'can' b'be' b'in' b'turn' b'a' b'application' b'off' b'at' b'night'
    b'.' b'Some' b'mature' b'birds' b'were' b'spotted' b',' b'itself' b'that' b'the' b'M\xc4\x81ori' b'similarly' b'believes' b'that' b'he' b'can' b'have' b'real' b'fluid' b'aging'
    b'under' b'trees' b',' b'nor' b'<unk>' b'throughout' b'the' b'monthly' b'map' b'of' b'these' b'example' b'.' b'The' b'predatory' b'alphabet' b'reagent' b'may' b'be' b'Friedman'
    b'permit' b',' b'and' b'their' b'ability' b'is' b'aggressive' b',' b'lose' b'up' b'of' b'Horus' b'.' b'Today' b',' b'they' b'create' b'in' b'areas' b','
    b'Warrior' b',' b'and' b'bite' b'for' b'Kaemtjenent' b',' b'<unk>' b',' b'filament' b'ethnic' b'deer' b',' b'cotton' b'effects' b'and' b'consultation' b'them' b'to' b'interphase'
    b'that' b'they' b'can' b'occur' b'up' b'.' b'This' b'starting' b'employ' b'of' b'approval' b'so' b'prey' b'.' b'About' b'example' b',' b'it' b'may' b'be'
    b'white' b'compared' b'to' b'available' b',' b'although' b'the' b'kakapo' b'odor' b'may' b'be' b'introduced' b'from' b'clinical' b'species' b'or' b'conditions' b'.' b'One' b'thick'
    b'damage' b'does' b'not' b'be' b'young' b'.' b'At' b'least' b'some' b'other' b'corners' b'is' b'employed' b'as' b'Commons' b'.' b'The' b'primary' b'pair' b'of'
    b'births' b'Judaism' b'is' b'very' b'<unk>' b',' b'is' b'difficult' b'to' b'produce' b',' b'when' b'they' b'will' b'be' b'observed' b'into' b'gaits' b'on' b'their'
    b'hands' b'.' b'For' b'example' b',' b'they' b'wiped' b'that' b'60' b'of' b'invade' b'birds' b'every' b'large' b'police' b'or' b'for' b'each' b'sequence' b','
    b'such' b'as' b'<unk>' b'and' b'green' b'activities' b',' b'which' b'will' b'have' b',' b'however' b'.' b'resistance' b'for' b'perhaps' b'another' b'eggs' b'they' b"'d"
    b'heard' b'well' b'seize' b'that' b'Great' b'traits' b'may' b'be' b'reunited' b'by' b'specific' b'structural' b'fact' b'or' b'center' b'.' b'Low' b'females' b'require' b'Islam'
    b'a' b'sensitive' b'portion' b'of' b'methods' b'for' b'rotation' b'.' b'In' b'2002' b',' b'other' b'usually' b'color' b',' b'rather' b'highly' b'cement' b',' b'weakening'
    b'when' b'they' b'were' b'extremely' b'commonly' b'slightly' b'valid' b'.' b'<eos>' b'There' b'are' b'their' b'<unk>' b',' b'Benares' b',' b'or' b'aground' b'enterprise' b'from'
    b'the' b'fork' b'with' b'common' b'dynamics' b'.' b'Tech' b'started' b'it' b'in' b'but' b'a' b'Tavern' b',' b'around' b'designed' b'filled' b'<unk>' b',' b'may'
    b'aid' b'due' b'to' b'severe' b'planets' b'.' b'Other' b'myths' b'are' b'not' b'able' b'to' b'prevent' b'bone' b'trees' b'.' b'While' b'they' b'realised' b'that'
    b'Celtic' b'amounts' b'of' b'specific' b'behaviour' b'come' b',' b'Australia' b'may' b'cause' b'<unk>' b'or' b'retains' b'imaging' b'person' b'when' b'they' b'quickly' b'be' b'made'
    b'both' b'.' b'n' b'mammals' b'may' b'be' b'distinguished' b'as' b'habitats' b'considered' b'a' b'attacker' b'without' b'1' b'.' b'Males' b'similar' b'to' b'that' b'of'
    b'females' b"'" b'literary' b'center' b'.' b'muscle' b'<unk>' b'kill' b'the' b'chicks' b'of' b'breeding' b'products' b'by' b'<unk>' b'to' b'detach' b'a' b'active' b'olive'
    b'cults' b',' b'supplier' b'them' b',' b'herpes' b',' b'absorbs' b'"' b'resemblance' b'to' b'starts' b'"' b':' b'Acres' b',' b'<unk>' b',' b'or' b'organ'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Conservation' b'@-@' b'awaited' b'Health' b'=' b'=' b'=' b'<eos>' b'<eos>' b'After' b'masses' b'for' b'her' b'divorce'
    b',' b'it' b'will' b'be' b'aggressive' b'to' b'engage' b'from' b'normal' b'bluebunch' b'circumstances' b'.' b'Thus' b',' b'when' b'white' b'scandal' b'slowly' b'diminished' b','
    b'they' b'plundered' b'young' b'planets' b'.' b'This' b'species' b'may' b'act' b'in' b'Freeville' b'in' b'eastern' b'Scotland' b'.' b'In' b'some' b'parts' b',' b'Ceres'
    b'from' b'their' b'nests' b'refers' b'to' b'deep' b',' b'often' b'facades' b'.' b'Any' b'of' b'the' b'avian' b'traces' b'of' b'Knut' b',' b'provides' b'the'





.. GENERATED FROM PYTHON SOURCE LINES 192-197

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 197-242

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 243-252

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 252-260

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 261-263

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 263-272

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 273-277

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 277-289

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.1
    loss: 5.168
    elapsed time (seconds): 112.7




.. GENERATED FROM PYTHON SOURCE LINES 290-301

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  17.874 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
