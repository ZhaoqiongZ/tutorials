
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'event' b'and' b'<unk>' b'strategies' b',' b'humans' b',' b'red' b'candidates' b',' b'physical' b'starlings' b'(' b'accompanied' b'with' b'modern' b'<unk>' b')' b';' b'will'
    b'contain' b'a' b'larger' b',' b'set' b'aboard' b'grasp' b'searching' b',' b'which' b'can' b'be' b'sure' b'rather' b'than' b'waste' b'.' b'Nevertheless' b',' b'they'
    b'do' b'not' b'begin' b'they' b'have' b'Harishchandra' b'stack' b'practical' b',' b'like' b'more' b'brilliantly' b'from' b'loss' b',' b'and' b'argues' b'how' b'in' b'several'
    b'years' b'this' b'phrases' b'.' b'This' b'behaviour' b'may' b'be' b'limited' b'with' b'his' b'names' b'and' b'McDougal' b'period' b'for' b'62' b'years' b'.' b'<eos>'
    b'A' b'suitable' b'definition' b'in' b'eight' b'older' b'activity' b'schools' b'found' b'Princess' b',' b'improves' b'the' b'Augustan' b'Court' b'as' b'focus' b',' b'and' b'there'
    b'are' b'two' b'caps' b'names' b',' b'including' b'spots' b'conclusion' b'.' b'The' b'kakapo' b'altar' b'a' b'neighbourhoods' b'that' b'attempt' b'to' b'<unk>' b'intercourse' b','
    b'but' b'low' b',' b'instead' b'of' b'Cave' b'teeth' b'at' b'all' b'takes' b'place' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'1935' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'The' b'term' b'United' b'States' b'can' b'be' b'purchased' b'by' b'common' b'epithet' b'birds' b'throughout' b'the' b'1835' b'language' b'.' b'A'
    b'gravity' b',' b'however' b',' b'is' b'more' b'important' b'for' b'poor' b'lives' b',' b'as' b'it' b'descended' b'security' b'with' b'his' b'actual' b'cannon' b'.'
    b'The' b'four' b'birds' b'can' b'be' b'cancelled' b'during' b'the' b'earth' b'blocked' b'around' b'250' b'or' b'a' b'bird' b'who' b'cannot' b'be' b'seen' b','
    b'New' b'York' b'.' b'This' b'is' b'made' b'by' b'certain' b'COs' b'during' b'other' b'centuries' b',' b'or' b'widely' b'begin' b'to' b'have' b'additional' b'jokes'
    b',' b'like' b'some' b'birds' b'wanted' b'to' b'produce' b'their' b'habit' b'.' b'According' b'to' b'her' b'identifiable' b',' b'Aki' b'proceeds' b'to' b'happen' b'signature'
    b'that' b'they' b'are' b'at' b'a' b'surface' b'and' b'consume' b'on' b'.' b'Ceres' b'is' b'poured' b'from' b'Heston' b',' b'Homarus' b'(' b'e.g.' b'<unk>'
    b',' b'tree' b'and' b'wild' b',' b'or' b'to' b'<unk>' b',' b'1279' b',' b'below' b'to' b'"' b'makes' b'more' b'variant' b'"' b')' b','
    b'are' b'chosen' b'to' b'be' b'defined' b'by' b'their' b'number' b'of' b'detail' b'to' b'form' b'Saunders' b'Deva' b'.' b'<eos>' b'In' b'1900' b',' b'X'
    b'forests' b'do' b'not' b'approach' b'to' b'the' b'Kingdom' b'of' b'civilian' b',' b'and' b'the' b'main' b'Raj' b'will' b'begin' b'almost' b'until' b'this' b'behaviour'
    b'.' b'When' b'many' b'birds' b'must' b'reggaeton' b'improvise' b'about' b'but' b'around' b'the' b'Spaniards' b',' b'there' b'are' b'decided' b'lined' b'one' b'home' b'.'
    b'<unk>' b',' b'one' b'attempt' b'that' b'they' b'are' b'rich' b'by' b'their' b'way' b'without' b'their' b'closure' b'if' b'they' b'are' b'often' b'always' b'known'
    b'.' b'Throughout' b'of' b'his' b'bird' b',' b'they' b'<unk>' b'neutral' b'many' b'lines' b'about' b'them' b'.' b'The' b'male' b"'s" b'banks' b',' b'with'
    b'the' b'wind' b'psychological' b'gray' b',' b'should' b'be' b'their' b'slightest' b'mechanism' b',' b'in' b'"' b'broad' b'police' b'"' b',' b'although' b'suggested' b'.'
    b'It' b'also' b'will' b'be' b'"' b'widely' b'exhausted' b'"' b'(' b'this' b'or' b'to' b'begin' b'throughout' b'a' b'crisis' b',' b'and' b'as' b'whether'
    b'of' b'liquid' b',' b'masses' b'will' b'be' b'mistaken' b'to' b'load' b')' b'.' b'In' b'1933' b',' b'when' b'Charles' b'mantelli' b':' b'The' b'yellow'
    b'<unk>' b'of' b'Natural' b'vintage' b'bird' b'follows' b'Mottola' b'in' b'1870' b'.' b'Only' b'<unk>' b',' b'their' b'fire' b'origin' b',' b'2' b',' b'made'
    b'their' b'last' b'threats' b'to' b'have' b'been' b'effective' b'in' b'against' b'mysterious' b'purposes' b',' b'movement' b'hot' b'Wales' b'\xe2\x80\x93' b'South' b'.' b'There' b','
    b'they' b'reestablished' b'<unk>' b'needs' b',' b'McLeish' b'rough' b'microscopy' b',' b'and' b'<unk>' b'.' b'Many' b'campaigns' b'would' b'be' b'vague' b'to' b'some' b'other'
    b'birds' b'back' b'to' b'each' b'other' b'and' b'bodyguard' b'.' b'This' b'bird' b'reflected' b'a' b'nuclear' b'membrane' b"'" b'Film' b'(' b'John' b'Collins' b')'
    b'B' b',' b'<unk>' b'predators' b'before' b'their' b'mother' b"'s" b'Easter' b',' b'6' b',' b'3' b'\xe2\x80\x93' b'07' b'\xce\xbcm' b',' b'which' b'is' b'assumed'
    b'long' b'here' b'.' b'Ware' b'eaten' b'greater' b'groups' b'or' b'Collaboration' b',' b'one' b'too' b'or' b'short' b'lovers' b'system' b'at' b'the' b'base' b','
    b'where' b'it' b'recommended' b'more' b'than' b'two' b'months' b'on' b'it' b'.' b'If' b'it' b'is' b'more' b'<unk>' b',' b'the' b'living' b'honeyeaters' b'of'
    b'it' b'involves' b'certain' b'drum' b'or' b'markings' b',' b'which' b'shipped' b'at' b'least' b'three' b'hours' b'.' b'<eos>' b'organ' b':' b',' b'and' b'when'
    b'is' b'colour' b',' b'primarily' b'fine' b'joked' b',' b'which' b'show' b'it' b'the' b'attested' b'that' b'some' b'convenient' b'aligned' b'know' b',' b'typically' b','
    b'they' b'believed' b',' b'as' b'playing' b'high' b'nm' b'within' b'any' b'stem' b'.' b'<eos>' b'<unk>' b'\xe2\x86\x92' b'M.' b'Palace' b'<unk>' b'we' b'lived' b'on'
    b'to' b'use' b'Foreign' b'@-@' b'bull' b',' b'who' b'just' b'shares' b'with' b'frames' b'in' b'tree' b'styles' b'.' b'However' b',' b'it' b'is' b'revealed'
    b'by' b'until' b'others' b',' b'its' b'incoming' b'own' b'variants' b'of' b'partial' b'and' b'behaviour' b'even' b'or' b'once' b'they' b"'m" b'unique' b'with' b'Six'
    b'listed' b'species' b'.' b'Glass' b'even' b'selected' b'in' b'display' b'of' b'lead' b'males' b'present' b'north' b'or' b'40' b',' b'one' b'or' b'the' b'shooting'
    b',' b'and' b'south' b'underground' b'over' b'1' b'@.@' b'5' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo'
    b"'s" b'development' b'in' b'<unk>' b'evolved' b'populations' b'of' b'over' b'2' b'million' b'.' b'About' b'23' b'%' b'of' b'chicks' b'over' b'part' b'released' b'as'
    b'often' b'occupy' b'head' b',' b'low' b',' b'Kubrick' b'occasionally' b',' b'toxic' b'<unk>' b'on' b'the' b'ground' b',' b'and' b'possibly' b'pass' b'in' b'a'
    b'area' b'of' b'<unk>' b',' b'means' b'by' b'an' b'electron' b'colour' b',' b'or' b'wide' b',' b'towards' b'airfields' b'.' b'Two' b'species' b',' b'consists'
    b'of' b'New' b'Zealand' b',' b'realistic' b'leafy' b'decreasing' b',' b'fees' b',' b'and' b'Predatory' b'crude' b'distribution' b'such' b'as' b'<unk>' b',' b'and' b'agricultural'
    b'abundance' b'are' b'seated' b'in' b'the' b'bird' b'.' b'They' b'can' b'be' b'dark' b'with' b'other' b'coloured' b',' b'covered' b'during' b'Defense' b'and' b'flock'
    b'leading' b'to' b'the' b'irregular' b'mating' b',' b'or' b'seeing' b'ribosomes' b'but' b'clothing' b'most' b'sectors' b'.' b'<eos>' b'Many' b'they' b'really' b'survive' b'throughout'
    b'them' b',' b'which' b'when' b'to' b'reduce' b'galaxies' b'of' b'pools' b'mortars' b',' b'they' b'involve' b'virtually' b'up' b'when' b'trees' b'have' b'not' b'suggested'
    b',' b'they' b'must' b'allow' b'1' b'.' b'A' b'greater' b'majority' b'is' b'used' b'to' b'be' b'organized' b'.' b'Although' b'rarely' b'spots' b'Rihanna' b'talked'
    b'for' b'Ontario' b',' b'pink' b'measures' b';' b'such' b'as' b'distressed' b'powerful' b',' b'they' b'are' b'distinct' b'cheap' b'on' b'veins' b',' b'commenting' b'Dahlan'
    b'and' b'eat' b'oxidation' b'before' b'did' b'occur' b'.' b'The' b'evidence' b'is' b'ideal' b'.' b'Common' b'starlings' b'exist' b'in' b'a' b'partial' b'venture' b','
    b'Harford' b',' b'dust' b',' b'alert' b',' b'and' b'vampire' b'fire' b'and' b'constructed' b'why' b'they' b'are' b'their' b'flame' b'of' b'<unk>' b'and' b'causes'
    b'up' b'in' b'as' b'feathers' b',' b'and' b'human' b'ridges' b',' b'which' b'are' b'records' b'that' b'they' b'crossed' b'suppose' b',' b'included' b'capita' b'them'
    b'as' b'<unk>' b'training' b'.' b'Christopher' b'and' b'reduce' b'crickets' b'leg' b'male' b'begin' b'upon' b'open' b'.' b'\xe2\x86\x92' b'for' b'Ceres' b'hosts' b'the' b'dry'
    b',' b'thus' b'giving' b'even' b'remodeled' b'in' b'ice' b'to' b'be' b'downtown' b'once' b'separated' b';' b'its' b'aroused' b'appearance' b'are' b'easy' b'following' b'its'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 201.5
    loss: 5.168
    elapsed time (seconds): 113.2




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  23.996 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
