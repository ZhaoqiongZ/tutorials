
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-162

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 163-166

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 166-191

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Testosterone' b'.' b'The' b'grave' b'is' b'debated' b'<unk>' b'in' b'port' b',' b'where' b'it' b'was' b'not' b'known' b'again' b'in' b'this' b'way' b','
    b'earning' b'it' b'in' b'his' b'Systema' b'Rock' b'<unk>' b'(' b'"' b'Black' b'Day' b'"' b')' b'respectively' b'from' b'Brazil' b'.' b'Hunting' b',' b'Stalin'
    b'delivered' b'a' b'"' b'night' b'call' b'"' b'Nirnaya' b',' b'though' b'the' b'unusual' b'species' b'Reubens' b'said' b'it' b'"' b'a' b'real' b'soul' b'to'
    b'be' b'associated' b'and' b'international' b'ten' b'sub' b'@-@' b'speaking' b'birds' b',' b'which' b'is' b'pretty' b'<unk>' b'than' b'around' b'relocate' b'to' b'its' b'taxa'
    b'through' b'another' b'evil' b'of' b'there' b'.' b'"' b'Additionally' b',' b'it' b'could' b'be' b'divided' b'for' b'a' b'disease' b'.' b'One' b'of' b'these'
    b'characters' b'in' b'Biodiversity' b'activities' b'are' b'most' b'discouraged' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Last' b'history' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'='
    b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Caribbean' b'starlings' b'have' b'a' b'planet' b'attack' b'during' b'the' b'Whole' b'East' b',' b'but' b'David' b'Harris'
    b'<unk>' b'is' b'unnecessary' b'.' b'One' b'birds' b'are' b'discover' b'to' b'occur' b'in' b'a' b'arcade' b',' b'which' b'loaded' b'shape' b'into' b'the' b'monarchy'
    b'.' b'It' b'may' b'be' b'common' b'when' b'Tennyson' b'is' b'almost' b'often' b'the' b'dominant' b'human' b'button' b'gathered' b'via' b'causing' b'it' b'.' b'Owen'
    b',' b'relied' b'on' b'the' b'very' b'sepulchral' b'exception' b',' b'so' b'it' b'is' b'seen' b'towards' b'Darkness' b',' b'by' b'the' b'rear' b'consolidated' b'located'
    b'cosmetic' b'divinities' b'and' b'causes' b'an' b'sound' b'on' b'the' b'drains' b'.' b'Peter' b'<unk>' b'metallicity' b'shows' b'Word' b',' b'in' b'which' b'they' b'have'
    b'already' b'served' b'Andr\xc3\xa9' b'mapped' b',' b'more' b'likely' b'.' b'In' b'species' b'it' b'is' b'an' b'coat' b'that' b'makes' b'them' b'with' b'their' b'earlier'
    b'male' b'and' b'quite' b'search' b';' b'they' b'are' b'prohibited' b',' b'which' b'are' b'does' b'not' b'begin' b'time' b'.' b'Based' b'as' b'they' b'transcription'
    b'charms' b',' b'instead' b'of' b'even' b'able' b'to' b'have' b'been' b'an' b'pair' b'of' b'Sewell' b'.' b'If' b'searching' b'to' b'indicate' b',' b'when'
    b'there' b'is' b'taught' b'off' b'left' b'or' b'catalogue' b'as' b'they' b'find' b'about' b'the' b'head' b',' b'they' b'bring' b'land' b'or' b'red' b'with'
    b',' b'quarter' b'or' b'forget' b'to' b'<unk>' b'(' b'i.e.' b'as' b'too' b'moderate' b'running' b'below' b'least' b'on' b'a' b'meat' b',' b'whose' b'head'
    b'or' b'will' b'be' b'Agni' b'.' b'As' b'this' b'will' b'be' b'self' b'@-@' b'sized' b'civil' b',' b'you' b'will' b'be' b'<unk>' b'loaded' b'without'
    b')' b'.' b'According' b'to' b'discredit' b',' b'they' b'approach' b'to' b'be' b'safe' b'.' b'There' b'are' b'believed' b'that' b'the' b'ball' b'inside' b'hard'
    b'at' b'16' b':' b'00' b'\xe2\x80\x93' b'3' b'\xce\xbcm' b',' b'a' b'RAF' b'group' b',' b'800' b'm' b'(' b'370' b'mi' b')' b'scenes' b','
    b'so' b'is' b'inappropriate' b'stable' b'from' b'obscene' b'iron' b'length' b'.' b'Before' b'its' b'efforts' b'turns' b'they' b'Garth' b'gas' b'.' b'<eos>' b'South' b'@-@'
    b'intensive' b',' b'seated' b'by' b'section' b'or' b'after' b'white' b',' b'1811' b',' b'800' b'&' b'frequency' b',' b'22' b'\xe2\x80\x93' b'1' b'years' b','
    b'and' b'is' b'known' b'as' b'four' b'as' b'1' b'seconds' b',' b'with' b'flattened' b'legs' b'.' b'Across' b'this' b'time' b',' b'exhausting' b'the' b'southeastern'
    b'Ones' b'is' b'sufficiently' b'at' b'night' b'to' b'find' b'varying' b'structural' b'numbers' b'from' b'periods' b'.' b'<unk>' b'are' b'good' b',' b'well' b'as' b'warning'
    b',' b'<unk>' b',' b'and' b'835' b'farms' b'.' b'The' b'existing' b'levels' b'perform' b'one' b'dollars' b'and' b'has' b'strongly' b'been' b"'" b'grass' b'.'
    b"'" b"'" b'males' b"'" b'may' b'have' b'negative' b'complexes' b',' b'<unk>' b'in' b'primordial' b',' b'dry' b',' b'and' b'muscular' b',' b'not' b'properly'
    b'progressing' b'.' b'It' b'is' b'both' b'as' b'large' b',' b'based' b'on' b'so' b'they' b'appear' b'on' b'a' b'difference' b'where' b'larger' b',' b'in'
    b',' b'is' b'connected' b'as' b'Kratos' b'.' b'<eos>' b'Composer' b'starling' b'lives' b',' b'symbolic' b',' b'grass' b',' b'recovery' b',' b'Kaibab' b',' b'and'
    b'pale' b'dissolves' b'preserves' b'in' b'occupied' b'them' b'\xe2\x80\x94' b'<unk>' b'or' b'undergone' b'a' b'damage' b'of' b'wings' b'.' b'The' b'most' b'parody' b'in' b'similar'
    b'Syrah' b',' b'socially' b'<unk>' b',' b'swollen' b',' b'\xe2\x88\x92' b',' b'then' b'impractical' b';' b'usually' b'on' b'most' b'of' b'the' b'country' b'Mountain' b'hunted'
    b'its' b'angle' b'and' b'it' b'has' b'same' b'Halen' b'.' b'Each' b'example' b'consists' b'ex' b'@-@' b'up' b'by' b'the' b'yellow' b',' b'her' b'strike'
    b'male' b',' b'on' b'the' b'side' b'of' b'a' b'email' b'on' b'the' b'greenish' b'side' b'of' b'her' b'body' b'or' b'brown' b'horse' b'artist' b','
    b'but' b'other' b'are' b'changing' b'open' b'factors' b'.' b'<eos>' b'announce' b'Andros' b'are' b'white' b'for' b'uranium' b'and' b'popular' b'rates' b'to' b'free' b'Bells'
    b'and' b'as' b'they' b'<unk>' b'alone' b',' b'by' b'Found' b'BC' b'.' b'Males' b'are' b'generally' b'known' b'as' b'the' b'sheep' b'@-@' b'ridden' b'species'
    b'of' b'<unk>' b'.' b'After' b'their' b'stibnite' b'(' b'principally' b'<unk>' b')' b',' b'it' b'may' b'be' b'recently' b'involved' b'.' b'<eos>' b'ALL' b'<unk>'
    b'vastly' b'drive' b'of' b'12' b'\xc2\xb0' b'F' b'(' b'ordinated' b'in' b'9' b'\xc2\xb0' b'tons' b')' b',' b'which' b'<unk>' b'a' b'high' b'side' b'of'
    b'down' b'.' b'In' b'particular' b',' b'it' b'is' b'primarily' b'collected' b'in' b'sometimes' b',' b'Abolition' b',' b'and' b'enthusiast' b'associations' b'at' b'a' b'granite'
    b'distance' b'.' b'M.' b'noctilio' b'multicellular' b'(' b'<unk>' b')' b'is' b'sold' b'as' b'long' b'as' b'dark' b',' b'occurring' b'the' b'head' b',' b'which'
    b'could' b'be' b'distinguished' b'by' b'way' b',' b'by' b'par' b'with' b'body' b'restrictions' b'.' b'Like' b'other' b'females' b'are' b'pale' b'simply' b'common' b'enough'
    b',' b'breaks' b'by' b'another' b'colour' b'mate' b'before' b'the' b'various' b'breeding' b'shops' b'.' b'One' b'other' b'steps' b'had' b'placed' b'a' b'outstanding' b'fishes'
    b'than' b'The' b'stipe' b',' b'particularly' b'by' b'tubes' b'especially' b'in' b'its' b'signs' b'.' b'These' b'delicate' b'predators' b'have' b'recently' b'particularly' b'biodegradable' b','
    b'with' b'their' b'<unk>' b'program' b',' b'which' b'can' b'be' b'eat' b'on' b'their' b'social' b'moon' b'.' b'<eos>' b'prosthetic' b'range' b',' b'both' b'probably'
    b'assigned' b'to' b'both' b'possessing' b'Fain' b'(' b'one' b')' b',' b'are' b'not' b'known' b'to' b'develop' b'events' b'about' b'a' b'<unk>' b'or' b'networking'
    b',' b'anti' b'\xe2\x80\x93' b'32' b'or' b'tilting' b'acids' b',' b'which' b'is' b'useless' b'in' b'small' b',' b'LEDs' b',' b'sucking' b',' b'usually' b'photographed'
    b'up' b'or' b'they' b'extend' b'without' b'anyone' b'.' b'If' b'other' b'flowery' b'protein' b'degree' b',' b'they' b'viper' b'in' b'one' b'the' b'surface' b'of'
    b'capability' b'to' b'protect' b'evolved' b'or' b'spreading' b'back' b'back' b'.' b'It' b'was' b'well' b'by' b'leisurely' b'<unk>' b'(' b'translucent' b')' b'and' b':'
    b'"' b'<unk>' b'<unk>' b'"' b'(' b'nest' b')' b',' b'eating' b'between' b'Oxford' b'(' b'II' b')' b'and' b'Emperor' b'(' b'<unk>' b')' b'or'
    b'(' b'which' b'is' b'by' b'the' b'Ho' b'chaos' b')' b'and' b'Wolf' b'(' b'translucent' b'\xc3\x97' b'15' b'@.@' b'5' b'\xe2\x80\x93' b'3' b'\xce\xbcm' b')'
    b'.' b'It' b'teaches' b'six' b'slender' b'peaks' b'under' b'the' b'availability' b'of' b'survival' b'behind' b'any' b'enemy' b'surfaces' b',' b'scientists' b'(' b'including' b'or'
    b'tied' b'to' b'elderly' b'\xc2\xb0' b',' b'moderated' b',' b'and' b'females' b')' b',' b'some' b'point' b'atom' b'(' b'rare' b'stations' b')' b',' b'is'
    b'long' b'blind' b'.' b'In' b'late' b'2003' b',' b'what' b'are' b'large' b'for' b'enacted' b'\xe2\x80\x93' b'12' b'%' b'(' b'although' b'it' b'maintains' b'the'





.. GENERATED FROM PYTHON SOURCE LINES 192-197

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 197-242

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 243-252

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 252-260

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 261-263

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 263-272

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 273-277

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 277-289

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 208.6
    loss: 5.168
    elapsed time (seconds): 113.1




.. GENERATED FROM PYTHON SOURCE LINES 290-301

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.165 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
