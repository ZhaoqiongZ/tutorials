
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'studio' b'.' b'When' b'in' b'the' b'process' b'<unk>' b'Developers' b'students' b',' b'the' b'rest' b'of' b'his' b'orbit' b'proved' b'than' b'<unk>' b'at' b'composition'
    b'serving' b'in' b'Gwen' b'Square' b'.' b'Michael' b'finds' b'that' b'Martin' b'should' b'gain' b'enough' b'to' b'perform' b'this' b'album' b'to' b'compete' b'around' b'people'
    b'for' b'those' b'other' b'year' b'.' b'Asked' b'in' b'<unk>' b'were' b'declared' b'in' b'Ireland' b'to' b'be' b'able' b'to' b'operate' b'on' b'a' b'wide'
    b'work' b'Center' b'at' b'a' b'18' b'%' b'of' b'648' b'(' b'910' b'spectra' b'during' b'this' b'chain' b')' b'.' b'The' b'arrangement' b'are' b'elongated'
    b',' b'the' b'two' b'and' b'set' b'or' b'<unk>' b'or' b'to' b'lose' b'service' b'.' b'The' b'third' b'jaguar' b'in' b'limitations' b'are' b'recorded' b'with'
    b'<unk>' b':' b'the' b'Lou' b'don' b'Power' b'projectiles' b'on' b'December' b'28' b',' b'1988' b'.' b'The' b'game' b'carried' b'a' b'wide' b'sign' b'of'
    b'over' b'20' b'%' b';' b'prominent' b'stepped' b'on' b'other' b'mobbing' b'areas' b',' b'they' b'are' b'Clemson' b'allowed' b'for' b'their' b'gameplay' b'"' b'a'
    b'name' b'of' b'<unk>' b'shrubs' b',' b'"' b'and' b'that' b'to' b'be' b'viewed' b'as' b'became' b'possible' b'as' b'having' b'"' b'with' b'ready' b'"'
    b',' b'book' b',' b'or' b'to' b'work' b'in' b'Ukrainian' b'.' b'be' b'the' b'Sola' b'rivalry' b'episode' b',' b'president' b'and' b'Elizabeth' b'is' b'the'
    b'large' b'home' b',' b'developmental' b'the' b'following' b'day' b'.' b'For' b'example' b',' b'corresponds' b'to' b'power' b'secretly' b'reinforced' b'diverse' b'models' b'and' b'42'
    b'pieces' b'of' b'the' b'survival' b'of' b'accounts' b'.' b'Once' b'they' b'are' b'the' b'subject' b'of' b'a' b'storm' b'or' b'transport' b'plant' b'.' b'<eos>'
    b'<unk>' b'reddish' b'statement' b'have' b'met' b'mitosis' b',' b'or' b'even' b'texts' b'though' b'formerly' b'heptathlon' b'.' b'According' b'to' b'Victor' b'young' b'miners' b','
    b'it' b'could' b'be' b'found' b'only' b'of' b'the' b'rest' b'of' b'2006' b'as' b'they' b'are' b'told' b'to' b'have' b'been' b'online' b',' b'or'
    b'miss' b'as' b'well' b'as' b'C\xc3\xa9sar' b'v.' b'<unk>' b',' b'a' b'buoy' b'official' b'planet' b'to' b'not' b'destroy' b'mainly' b'stations' b'.' b'Odaenathus' b'does'
    b'not' b'help' b'Goro' b'alone' b',' b'more' b'fully' b'improvised' b'.' b'Kakapo' b',' b'so' b'simply' b'fully' b'the' b'most' b'<unk>' b'or' b'broken' b'notable'
    b'Jews' b',' b'there' b'would' b'not' b'be' b'able' b'to' b'persuade' b'its' b'common' b'home' b'length' b'.' b'The' b'gill' b'marker' b'are' b'sometimes' b'Kendall'
    b'lake' b',' b'and' b'are' b'there' b'to' b'be' b'.' b'Membrane' b'@-@' b'anticipated' b'Baker' b'give' b'roughly' b'20' b'%' b'of' b'posed' b'series' b'.'
    b'2' b'in' b'Mount' b'Benedict' b'so' b'Symptoms' b'remains' b'increased' b'.' b'<unk>' b'it' b'vital' b'leukemic' b'feathers' b',' b'including' b'other' b'athlete' b'Gonz\xc3\xa1lez' b'and'
    b'maintenance' b'objects' b'.' b'Jews' b'assembled' b'mainly' b'(' b'1865' b',' b'or' b'men' b'below' b'ground' b'and' b'them' b')' b'.' b'In' b'excess' b','
    b'food' b'help' b'measures' b',' b'small' b',' b'mowing' b',' b'and' b'<unk>' b'.' b'Archaeological' b'<unk>' b',' b'cold' b'and' b'warts' b'as' b'well' b'as'
    b'environmental' b'predators' b',' b'have' b'developed' b'various' b'obedience' b'to' b'reject' b'weather' b'from' b'the' b'upper' b'language' b'.' b'<eos>' b'Goals' b',' b'these' b'starlings'
    b'myeloproliferative' b'mitochondrial' b'objects' b'were' b'taught' b'in' b'temperate' b'neck' b'.' b'<eos>' b'Though' b'as' b'a' b'little' b'flight' b',' b'they' b'are' b'pale' b'destroyed'
    b'if' b'they' b'resembled' b'scale' b'a' b'Protestants' b':' b'to' b'refer' b'to' b'food' b',' b'to' b'consume' b'predators' b'within' b'the' b'poets' b'by' b'<unk>'
    b',' b'such' b'as' b'reaction' b'.' b'If' b'a' b'164' b'@-@' b'century' b'church' b'wooing' b',' b'despite' b'most' b'more' b'ancestral' b'are' b'fully' b'native'
    b',' b'they' b'are' b'retired' b'and' b'.' b'Both' b'circumstances' b'of' b'relation' b',' b'Grenache' b',' b'or' b'Europan' b'viewing' b'by' b'spiders' b'parasites' b'were'
    b'specified' b'to' b'be' b'Rosberg' b'.' b'The' b'kakapo' b'deny' b'internal' b'heaviest' b'toward' b'advertising' b'(' b'so' b'stores' b')' b',' b'great' b'plants' b','
    b'brilliant' b'and' b'destroying' b'that' b'it' b'(' b'time' b')' b'is' b'given' b'many' b'of' b'his' b'encouragement' b'(' b'were' b'to' b'Germain' b',' b'so'
    b'they' b'should' b'be' b'prevented' b')' b'at' b'tonners' b'into' b'coli' b'.' b'This' b'has' b'claims' b',' b'however' b',' b'and' b'as' b'when' b'there'
    b'were' b'two' b'<unk>' b'performance' b'.' b'<eos>' b'As' b'C.R.U.S.H.' b'comes' b'to' b'2' b'@.@' b'2' b'men' b',' b'a' b'very' b'high' b'substrates' b'ranging'
    b',' b'along' b'through' b'2' b'@.@' b'75' b'cm' b'(' b'95' b'ft' b')' b'away' b'representing' b'proper' b'species' b'of' b'diameter' b'that' b'are' b'estimated'
    b'to' b'exit' b'fountain' b'.' b'There' b'are' b'long' b'sequence' b'over' b'<unk>' b'occurs' b'during' b'an' b'range' b'when' b'they' b'might' b'begin' b'only' b'throughout'
    b'the' b'nests' b'of' b'proteins' b'.' b'They' b'uses' b'billboards' b'further' b'single' b'soon' b'may' b'Mars' b'chasing' b'likely' b',' b'while' b'the' b'kakapo' b'host'
    b'<unk>' b'through' b'volunteers' b'.' b'In' b'a' b'gill' b'ground' b',' b'they' b'attacked' b'weakened' b'as' b'food' b',' b'Zhao' b'attending' b'items' b'dead' b'fusion'
    b'or' b'19th' b'them' b'lances' b',' b'with' b'degenerate' b'substrate' b'forests' b'are' b'grave' b'.' b'If' b'a' b'small' b'chamber' b'are' b'now' b'both' b','
    b'Payne' b'that' b'tends' b'to' b'attract' b'their' b'formidable' b'fresh' b'input' b',' b'are' b'not' b'spore' b',' b'wanting' b'to' b'allow' b'small' b'starlings' b'from'
    b'their' b'technology' b'.' b'Whereas' b'<unk>' b'may' b'increase' b'for' b'yellow' b'dark' b',' b'reworked' b'or' b'<unk>' b'when' b'affects' b'so' b'seen' b'by' b'Catholicism'
    b'for' b'1' b'minutes' b'and' b'eggs' b',' b'which' b'Stacee' b'fins' b'initially' b'Ranch' b'their' b'nest' b'.' b'1000' b'years' b'after' b'this' b'female' b'is'
    b'about' b'purchases' b',' b'when' b'clusters' b'of' b'they' b'feed' b'upon' b',' b'they' b'dreadnoughts' b'have' b'lost' b'short' b'estimate' b'of' b'any' b'other' b'or'
    b'weakened' b',' b'but' b'they' b'remained' b'in' b'such' b'all' b'into' b'they' b'get' b'wing' b'.' b'In' b'the' b'world' b',' b'if' b'sections' b'do'
    b'not' b'happen' b'out' b'of' b'the' b'HIV' b'Vira' b'apoptotic' b',' b'a' b'male' b'cylindrical' b'measure' b'was' b'brownish' b',' b'they' b'end' b'up' b'to'
    b'beak' b'.' b'hypothesis' b'produce' b'their' b'eye' b'to' b'other' b'males' b'and' b'strange' b'in' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'humans' b'=' b'<eos>'
    b'<eos>' b'According' b'to' b'becomes' b'a' b'controversial' b'cobra' b'that' b'published' b'their' b'terminus' b'to' b'access' b'to' b'Chen' b',' b'Durham' b',' b'a' b'lion'
    b'@-@' b'like' b',' b'Cramp' b'eucalypts' b',' b'and' b'statue' b'and' b'a' b'extensive' b'structure' b',' b'which' b'<unk>' b'origin' b',' b'extends' b'across' b'they'
    b'@-@' b'push' b'to' b'flattened' b'serial' b'festivals' b'.' b'Hunting' b'screening' b'explicitly' b'Land' b'gives' b'<unk>' b'when' b'other' b'names' b'are' b'also' b'treated' b','
    b'Ireland' b'describes' b'rendering' b'<unk>' b',' b'<unk>' b',' b'mosques' b',' b'managing' b'a' b'hamlet' b'to' b'innocence' b'a' b'excellent' b'basis' b',' b'but' b'as'
    b'their' b'their' b'depiction' b'influences' b'.' b'The' b'wet' b'female' b'will' b'mechanised' b'synthesized' b'all' b'scaling' b'reachability' b'under' b'gun' b',' b'publishing' b',' b'and'
    b'<unk>' b'.' b'The' b'couple' b'becomes' b'changed' b'by' b'vacancy' b'.' b'The' b'common' b'starlings' b'are' b'reduced' b'as' b'an' b'food' b'redeployment' b'and' b'indicate'
    b'a' b'tradition' b'of' b'Yugoslavia' b'.' b'However' b',' b'each' b'of' b'them' b'had' b'once' b'been' b'mistaken' b'for' b'modern' b'sex' b'such' b'according' b','
    b'shape' b',' b'i.e.' b'they' b'are' b'usually' b'tied' b',' b'and' b'in' b'they' b'travel' b'influences' b'in' b'which' b'they' b'can' b'turn' b'as' b'their'
    b'beautiful' b'mortal' b'species' b'.' b'They' b'resemble' b'themselves' b'and' b'may' b'be' b'important' b'to' b'Steve' b'M.' b'Russ' b'.' b'They' b'typically' b'did' b'not'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.8
    loss: 5.168
    elapsed time (seconds): 115.1




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  36.338 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
