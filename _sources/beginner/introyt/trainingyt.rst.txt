
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/26.4M [00:00<?, ?B/s]
      0%|          | 65.5k/26.4M [00:00<01:13, 360kB/s]
      1%|          | 229k/26.4M [00:00<00:38, 678kB/s] 
      3%|3         | 852k/26.4M [00:00<00:10, 2.35MB/s]
      7%|7         | 1.93M/26.4M [00:00<00:05, 4.13MB/s]
     24%|##4       | 6.39M/26.4M [00:00<00:01, 14.5MB/s]
     37%|###6      | 9.70M/26.4M [00:00<00:00, 19.5MB/s]
     49%|####9     | 13.0M/26.4M [00:01<00:00, 20.3MB/s]
     67%|######6   | 17.6M/26.4M [00:01<00:00, 26.9MB/s]
     82%|########2 | 21.7M/26.4M [00:01<00:00, 30.4MB/s]
     95%|#########4| 25.0M/26.4M [00:01<00:00, 30.6MB/s]
    100%|##########| 26.4M/26.4M [00:01<00:00, 19.2MB/s]

      0%|          | 0.00/29.5k [00:00<?, ?B/s]
    100%|##########| 29.5k/29.5k [00:00<00:00, 328kB/s]

      0%|          | 0.00/4.42M [00:00<?, ?B/s]
      1%|1         | 65.5k/4.42M [00:00<00:12, 362kB/s]
      5%|5         | 229k/4.42M [00:00<00:06, 683kB/s] 
     21%|##        | 918k/4.42M [00:00<00:01, 2.63MB/s]
     44%|####3     | 1.93M/4.42M [00:00<00:00, 4.09MB/s]
    100%|##########| 4.42M/4.42M [00:00<00:00, 6.10MB/s]

      0%|          | 0.00/5.15k [00:00<?, ?B/s]
    100%|##########| 5.15k/5.15k [00:00<00:00, 64.1MB/s]
    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Coat  Coat  T-shirt/top  Coat




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.5202, 0.0647, 0.4671, 0.0258, 0.4887, 0.6787, 0.0511, 0.6780, 0.6021,
             0.3026],
            [0.9718, 0.1836, 0.3433, 0.1870, 0.5527, 0.0746, 0.4373, 0.3421, 0.4888,
             0.0218],
            [0.7779, 0.5893, 0.9419, 0.2166, 0.5290, 0.7504, 0.6796, 0.7597, 0.9787,
             0.1144],
            [0.1601, 0.4646, 0.6817, 0.8886, 0.2313, 0.8285, 0.2959, 0.3205, 0.9285,
             0.1008]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.637911796569824




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-326

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    

        running_vloss = 0.0
        # Set the model to evaluation mode, disabling dropout and using population 
        # statistics for batch normalization.
        model.eval()

        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(validation_loader):
                vinputs, vlabels = vdata
                voutputs = model(vinputs)
                vloss = loss_fn(voutputs, vlabels)
                running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.66035684402287
      batch 2000 loss: 0.8030749561600387
      batch 3000 loss: 0.6733479883298278
      batch 4000 loss: 0.6344917857619002
      batch 5000 loss: 0.5791238911340478
      batch 6000 loss: 0.5347708388093161
      batch 7000 loss: 0.5303485237434507
      batch 8000 loss: 0.514181029178435
      batch 9000 loss: 0.5289420102876611
      batch 10000 loss: 0.468140516284504
      batch 11000 loss: 0.4575411448449595
      batch 12000 loss: 0.47420046289800666
      batch 13000 loss: 0.43253787461004684
      batch 14000 loss: 0.41333109343989055
      batch 15000 loss: 0.419748461775016
    LOSS train 0.419748461775016 valid 0.43952426314353943
    EPOCH 2:
      batch 1000 loss: 0.42790146174223626
      batch 2000 loss: 0.39195862299000145
      batch 3000 loss: 0.4180353806184721
      batch 4000 loss: 0.38349406403060127
      batch 5000 loss: 0.4041185213584977
      batch 6000 loss: 0.3644086128624622
      batch 7000 loss: 0.37570757819816936
      batch 8000 loss: 0.37548007501111713
      batch 9000 loss: 0.3723863132350816
      batch 10000 loss: 0.3808490730551421
      batch 11000 loss: 0.3673996737152556
      batch 12000 loss: 0.35954993670631663
      batch 13000 loss: 0.3618686831087689
      batch 14000 loss: 0.35375833598037937
      batch 15000 loss: 0.34809983739600286
    LOSS train 0.34809983739600286 valid 0.3773289918899536
    EPOCH 3:
      batch 1000 loss: 0.3402419756050367
      batch 2000 loss: 0.3534350862017236
      batch 3000 loss: 0.34687453010785974
      batch 4000 loss: 0.35063241460645805
      batch 5000 loss: 0.3256113866937085
      batch 6000 loss: 0.3398353578442038
      batch 7000 loss: 0.303812745806601
      batch 8000 loss: 0.33020844918102377
      batch 9000 loss: 0.3368160280609627
      batch 10000 loss: 0.3389034517007094
      batch 11000 loss: 0.3347929609600469
      batch 12000 loss: 0.3192917805431498
      batch 13000 loss: 0.3324747907590354
      batch 14000 loss: 0.33277154187548147
      batch 15000 loss: 0.32675925608270334
    LOSS train 0.32675925608270334 valid 0.3435654044151306
    EPOCH 4:
      batch 1000 loss: 0.2779547599467114
      batch 2000 loss: 0.30944531398490654
      batch 3000 loss: 0.30924183302700475
      batch 4000 loss: 0.31042630381650815
      batch 5000 loss: 0.30570795771199666
      batch 6000 loss: 0.31371380987855807
      batch 7000 loss: 0.33179019263271764
      batch 8000 loss: 0.2944973145831609
      batch 9000 loss: 0.3155534580206331
      batch 10000 loss: 0.3118941378094605
      batch 11000 loss: 0.2893622964561728
      batch 12000 loss: 0.31041007513055957
      batch 13000 loss: 0.3063800661965797
      batch 14000 loss: 0.30213664090285236
      batch 15000 loss: 0.3111081488057389
    LOSS train 0.3111081488057389 valid 0.3476808965206146
    EPOCH 5:
      batch 1000 loss: 0.2978541100496996
      batch 2000 loss: 0.27620242198210687
      batch 3000 loss: 0.27847167041448845
      batch 4000 loss: 0.30013946222956295
      batch 5000 loss: 0.29775150834327724
      batch 6000 loss: 0.293814118750789
      batch 7000 loss: 0.28481553534935666
      batch 8000 loss: 0.2937820723437435
      batch 9000 loss: 0.2882539043013021
      batch 10000 loss: 0.2765300640695527
      batch 11000 loss: 0.2850731267847441
      batch 12000 loss: 0.29656704688433094
      batch 13000 loss: 0.27894597321687614
      batch 14000 loss: 0.2653863789776078
      batch 15000 loss: 0.2931117988265669
    LOSS train 0.2931117988265669 valid 0.3490990698337555




.. GENERATED FROM PYTHON SOURCE LINES 327-369

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  2.474 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
